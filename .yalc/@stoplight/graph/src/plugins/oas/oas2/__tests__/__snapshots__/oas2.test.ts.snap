// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`oas2 plugin complete document snapshot: nodes 1`] = `
Array [
  Object {
    "content": Object {
      "data": Object {
        "basePath": "/v2",
        "definitions": Object {
          "ApiResponse": Object {
            "properties": Object {
              "code": Object {
                "format": "int32",
                "type": "integer",
              },
              "message": Object {
                "type": "string",
              },
              "type": Object {
                "type": "string",
              },
            },
            "type": "object",
          },
          "Category": Object {
            "properties": Object {
              "id": Object {
                "format": "int64",
                "type": "integer",
              },
              "name": Object {
                "type": "string",
              },
            },
            "type": "object",
            "xml": Object {
              "name": "Category",
            },
          },
          "Order": Object {
            "properties": Object {
              "complete": Object {
                "default": false,
                "type": "boolean",
              },
              "id": Object {
                "format": "int64",
                "type": "integer",
              },
              "petId": Object {
                "format": "int64",
                "type": "integer",
              },
              "quantity": Object {
                "format": "int32",
                "type": "integer",
              },
              "shipDate": Object {
                "format": "date-time",
                "type": "string",
              },
              "status": Object {
                "description": "Order Status",
                "enum": Array [
                  "placed",
                  "approved",
                  "delivered",
                ],
                "type": "string",
              },
            },
            "type": "object",
            "xml": Object {
              "name": "Order",
            },
          },
          "Pet": Object {
            "properties": Object {
              "category": Object {
                "$ref": "#/definitions/Category",
              },
              "id": Object {
                "format": "int64",
                "type": "integer",
              },
              "name": Object {
                "example": "doggie",
                "type": "string",
              },
              "photoUrls": Object {
                "items": Object {
                  "type": "string",
                },
                "type": "array",
                "xml": Object {
                  "name": "photoUrl",
                  "wrapped": true,
                },
              },
              "status": Object {
                "description": "pet status in the store",
                "enum": Array [
                  "available",
                  "pending",
                  "sold",
                ],
                "type": "string",
              },
              "tags": Object {
                "items": Object {
                  "$ref": "#/definitions/Tag",
                },
                "type": "array",
                "xml": Object {
                  "name": "tag",
                  "wrapped": true,
                },
              },
            },
            "required": Array [
              "name",
              "photoUrls",
            ],
            "type": "object",
            "xml": Object {
              "name": "Pet",
            },
          },
          "Tag": Object {
            "properties": Object {
              "id": Object {
                "format": "int64",
                "type": "integer",
              },
              "name": Object {
                "type": "string",
              },
            },
            "type": "object",
            "xml": Object {
              "name": "Tag",
            },
          },
          "User": Object {
            "properties": Object {
              "email": Object {
                "type": "string",
              },
              "firstName": Object {
                "type": "string",
              },
              "id": Object {
                "format": "int64",
                "type": "integer",
              },
              "lastName": Object {
                "type": "string",
              },
              "password": Object {
                "type": "string",
              },
              "phone": Object {
                "type": "string",
              },
              "userStatus": Object {
                "description": "User Status",
                "format": "int32",
                "type": "integer",
              },
              "username": Object {
                "type": "string",
              },
            },
            "type": "object",
            "xml": Object {
              "name": "User",
            },
          },
        },
        "externalDocs": Object {
          "description": "Find out more about Swagger",
          "url": "http://swagger.io",
        },
        "host": "petstore.swagger.io",
        "info": Object {
          "contact": Object {
            "email": "apiteam@swagger.io",
          },
          "description": "This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key \`special-key\` to test the authorization filters.",
          "license": Object {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html",
          },
          "termsOfService": "http://swagger.io/terms/",
          "title": "Swagger Petstore",
          "version": "1.0.0",
        },
        "paths": Object {
          "/pet": Object {
            "post": Object {
              "consumes": Array [
                "application/json",
                "application/xml",
              ],
              "description": "",
              "operationId": "addPet",
              "parameters": Array [
                Object {
                  "description": "Pet object that needs to be added to the store",
                  "in": "body",
                  "name": "body",
                  "required": true,
                  "schema": Object {
                    "$ref": "#/definitions/Pet",
                  },
                },
              ],
              "produces": Array [
                "application/xml",
                "application/json",
              ],
              "responses": Object {
                "405": Object {
                  "description": "Invalid input",
                },
              },
              "security": Array [
                Object {
                  "petstore_auth": Array [
                    "write:pets",
                    "read:pets",
                  ],
                },
              ],
              "summary": "Add a new pet to the store",
              "tags": Array [
                "pet",
              ],
            },
            "put": Object {
              "consumes": Array [
                "application/json",
                "application/xml",
              ],
              "description": "",
              "operationId": "updatePet",
              "parameters": Array [
                Object {
                  "description": "Pet object that needs to be added to the store",
                  "in": "body",
                  "name": "body",
                  "required": true,
                  "schema": Object {
                    "$ref": "#/definitions/Pet",
                  },
                },
              ],
              "produces": Array [
                "application/xml",
                "application/json",
              ],
              "responses": Object {
                "400": Object {
                  "description": "Invalid ID supplied",
                },
                "404": Object {
                  "description": "Pet not found",
                },
                "405": Object {
                  "description": "Validation exception",
                },
              },
              "security": Array [
                Object {
                  "petstore_auth": Array [
                    "write:pets",
                    "read:pets",
                  ],
                },
              ],
              "summary": "Update an existing pet",
              "tags": Array [
                "pet",
              ],
            },
          },
          "/pet/findByStatus": Object {
            "get": Object {
              "description": "Multiple status values can be provided with comma separated strings",
              "operationId": "findPetsByStatus",
              "parameters": Array [
                Object {
                  "collectionFormat": "multi",
                  "description": "Status values that need to be considered for filter",
                  "in": "query",
                  "items": Object {
                    "default": "available",
                    "enum": Array [
                      "available",
                      "pending",
                      "sold",
                    ],
                    "type": "string",
                  },
                  "name": "status",
                  "required": true,
                  "type": "array",
                },
              ],
              "produces": Array [
                "application/xml",
                "application/json",
              ],
              "responses": Object {
                "200": Object {
                  "description": "successful operation",
                  "schema": Object {
                    "items": Object {
                      "$ref": "#/definitions/Pet",
                    },
                    "type": "array",
                  },
                },
                "400": Object {
                  "description": "Invalid status value",
                },
              },
              "security": Array [
                Object {
                  "petstore_auth": Array [
                    "write:pets",
                    "read:pets",
                  ],
                },
              ],
              "summary": "Finds Pets by status",
              "tags": Array [
                "pet",
              ],
            },
          },
          "/pet/findByTags": Object {
            "get": Object {
              "deprecated": true,
              "description": "Muliple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.",
              "operationId": "findPetsByTags",
              "parameters": Array [
                Object {
                  "collectionFormat": "multi",
                  "description": "Tags to filter by",
                  "in": "query",
                  "items": Object {
                    "type": "string",
                  },
                  "name": "tags",
                  "required": true,
                  "type": "array",
                },
              ],
              "produces": Array [
                "application/xml",
                "application/json",
              ],
              "responses": Object {
                "200": Object {
                  "description": "successful operation",
                  "schema": Object {
                    "items": Object {
                      "$ref": "#/definitions/Pet",
                    },
                    "type": "array",
                  },
                },
                "400": Object {
                  "description": "Invalid tag value",
                },
              },
              "security": Array [
                Object {
                  "petstore_auth": Array [
                    "write:pets",
                    "read:pets",
                  ],
                },
              ],
              "summary": "Finds Pets by tags",
              "tags": Array [
                "pet",
              ],
            },
          },
          "/pet/{petId}": Object {
            "delete": Object {
              "description": "",
              "operationId": "deletePet",
              "parameters": Array [
                Object {
                  "in": "header",
                  "name": "api_key",
                  "required": false,
                  "type": "string",
                },
                Object {
                  "description": "Pet id to delete",
                  "format": "int64",
                  "in": "path",
                  "name": "petId",
                  "required": true,
                  "type": "integer",
                },
              ],
              "produces": Array [
                "application/xml",
                "application/json",
              ],
              "responses": Object {
                "400": Object {
                  "description": "Invalid ID supplied",
                },
                "404": Object {
                  "description": "Pet not found",
                },
              },
              "security": Array [
                Object {
                  "petstore_auth": Array [
                    "write:pets",
                    "read:pets",
                  ],
                },
              ],
              "summary": "Deletes a pet",
              "tags": Array [
                "pet",
              ],
            },
            "get": Object {
              "description": "Returns a single pet",
              "operationId": "getPetById",
              "parameters": Array [
                Object {
                  "description": "ID of pet to return",
                  "format": "int64",
                  "in": "path",
                  "name": "petId",
                  "required": true,
                  "type": "integer",
                },
              ],
              "produces": Array [
                "application/xml",
                "application/json",
              ],
              "responses": Object {
                "200": Object {
                  "description": "successful operation",
                  "schema": Object {
                    "$ref": "#/definitions/Pet",
                  },
                },
                "400": Object {
                  "description": "Invalid ID supplied",
                },
                "404": Object {
                  "description": "Pet not found",
                },
              },
              "security": Array [
                Object {
                  "api_key": Array [],
                },
              ],
              "summary": "Find pet by ID",
              "tags": Array [
                "pet",
              ],
            },
            "post": Object {
              "consumes": Array [
                "application/x-www-form-urlencoded",
              ],
              "description": "",
              "operationId": "updatePetWithForm",
              "parameters": Array [
                Object {
                  "description": "ID of pet that needs to be updated",
                  "format": "int64",
                  "in": "path",
                  "name": "petId",
                  "required": true,
                  "type": "integer",
                },
                Object {
                  "description": "Updated name of the pet",
                  "in": "formData",
                  "name": "name",
                  "required": false,
                  "type": "string",
                },
                Object {
                  "description": "Updated status of the pet",
                  "in": "formData",
                  "name": "status",
                  "required": false,
                  "type": "string",
                },
              ],
              "produces": Array [
                "application/xml",
                "application/json",
              ],
              "responses": Object {
                "405": Object {
                  "description": "Invalid input",
                },
              },
              "security": Array [
                Object {
                  "petstore_auth": Array [
                    "write:pets",
                    "read:pets",
                  ],
                },
              ],
              "summary": "Updates a pet in the store with form data",
              "tags": Array [
                "pet",
              ],
            },
          },
          "/pet/{petId}/uploadImage": Object {
            "post": Object {
              "consumes": Array [
                "multipart/form-data",
              ],
              "description": "",
              "operationId": "uploadFile",
              "parameters": Array [
                Object {
                  "description": "ID of pet to update",
                  "format": "int64",
                  "in": "path",
                  "name": "petId",
                  "required": true,
                  "type": "integer",
                },
                Object {
                  "description": "Additional data to pass to server",
                  "in": "formData",
                  "name": "additionalMetadata",
                  "required": false,
                  "type": "string",
                },
                Object {
                  "description": "file to upload",
                  "in": "formData",
                  "name": "file",
                  "required": false,
                  "type": "file",
                },
              ],
              "produces": Array [
                "application/json",
              ],
              "responses": Object {
                "200": Object {
                  "description": "successful operation",
                  "schema": Object {
                    "$ref": "#/definitions/ApiResponse",
                  },
                },
              },
              "security": Array [
                Object {
                  "petstore_auth": Array [
                    "write:pets",
                    "read:pets",
                  ],
                },
              ],
              "summary": "uploads an image",
              "tags": Array [
                "pet",
              ],
            },
          },
          "/store/inventory": Object {
            "get": Object {
              "description": "Returns a map of status codes to quantities",
              "operationId": "getInventory",
              "parameters": Array [],
              "produces": Array [
                "application/json",
              ],
              "responses": Object {
                "200": Object {
                  "description": "successful operation",
                  "schema": Object {
                    "additionalProperties": Object {
                      "format": "int32",
                      "type": "integer",
                    },
                    "type": "object",
                  },
                },
              },
              "security": Array [
                Object {
                  "api_key": Array [],
                },
              ],
              "summary": "Returns pet inventories by status",
              "tags": Array [
                "store",
              ],
            },
          },
          "/store/order": Object {
            "post": Object {
              "description": "",
              "operationId": "placeOrder",
              "parameters": Array [
                Object {
                  "description": "order placed for purchasing the pet",
                  "in": "body",
                  "name": "body",
                  "required": true,
                  "schema": Object {
                    "$ref": "#/definitions/Order",
                  },
                },
              ],
              "produces": Array [
                "application/xml",
                "application/json",
              ],
              "responses": Object {
                "200": Object {
                  "description": "successful operation",
                  "schema": Object {
                    "$ref": "#/definitions/Order",
                  },
                },
                "400": Object {
                  "description": "Invalid Order",
                },
              },
              "summary": "Place an order for a pet",
              "tags": Array [
                "store",
              ],
            },
          },
          "/store/order/{orderId}": Object {
            "delete": Object {
              "description": "For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors",
              "operationId": "deleteOrder",
              "parameters": Array [
                Object {
                  "description": "ID of the order that needs to be deleted",
                  "format": "int64",
                  "in": "path",
                  "minimum": 1,
                  "name": "orderId",
                  "required": true,
                  "type": "integer",
                },
              ],
              "produces": Array [
                "application/xml",
                "application/json",
              ],
              "responses": Object {
                "400": Object {
                  "description": "Invalid ID supplied",
                },
                "404": Object {
                  "description": "Order not found",
                },
              },
              "summary": "Delete purchase order by ID",
              "tags": Array [
                "store",
              ],
            },
            "get": Object {
              "description": "For valid response try integer IDs with value >= 1 and <= 10. Other values will generated exceptions",
              "operationId": "getOrderById",
              "parameters": Array [
                Object {
                  "description": "ID of pet that needs to be fetched",
                  "format": "int64",
                  "in": "path",
                  "maximum": 10,
                  "minimum": 1,
                  "name": "orderId",
                  "required": true,
                  "type": "integer",
                },
              ],
              "produces": Array [
                "application/xml",
                "application/json",
              ],
              "responses": Object {
                "200": Object {
                  "description": "successful operation",
                  "schema": Object {
                    "$ref": "#/definitions/Order",
                  },
                },
                "400": Object {
                  "description": "Invalid ID supplied",
                },
                "404": Object {
                  "description": "Order not found",
                },
              },
              "summary": "Find purchase order by ID",
              "tags": Array [
                "store",
              ],
            },
          },
          "/user": Object {
            "post": Object {
              "description": "This can only be done by the logged in user.",
              "operationId": "createUser",
              "parameters": Array [
                Object {
                  "description": "Created user object",
                  "in": "body",
                  "name": "body",
                  "required": true,
                  "schema": Object {
                    "$ref": "#/definitions/User",
                  },
                },
              ],
              "produces": Array [
                "application/xml",
                "application/json",
              ],
              "responses": Object {
                "default": Object {
                  "description": "successful operation",
                },
              },
              "summary": "Create user",
              "tags": Array [
                "user",
              ],
            },
          },
          "/user/createWithArray": Object {
            "post": Object {
              "description": "",
              "operationId": "createUsersWithArrayInput",
              "parameters": Array [
                Object {
                  "description": "List of user object",
                  "in": "body",
                  "name": "body",
                  "required": true,
                  "schema": Object {
                    "items": Object {
                      "$ref": "#/definitions/User",
                    },
                    "type": "array",
                  },
                },
              ],
              "produces": Array [
                "application/xml",
                "application/json",
              ],
              "responses": Object {
                "default": Object {
                  "description": "successful operation",
                },
              },
              "summary": "Creates list of users with given input array",
              "tags": Array [
                "user",
              ],
            },
          },
          "/user/createWithList": Object {
            "post": Object {
              "description": "",
              "operationId": "createUsersWithListInput",
              "parameters": Array [
                Object {
                  "description": "List of user object",
                  "in": "body",
                  "name": "body",
                  "required": true,
                  "schema": Object {
                    "items": Object {
                      "$ref": "#/definitions/User",
                    },
                    "type": "array",
                  },
                },
              ],
              "produces": Array [
                "application/xml",
                "application/json",
              ],
              "responses": Object {
                "default": Object {
                  "description": "successful operation",
                },
              },
              "summary": "Creates list of users with given input array",
              "tags": Array [
                "user",
              ],
            },
          },
          "/user/login": Object {
            "get": Object {
              "description": "",
              "operationId": "loginUser",
              "parameters": Array [
                Object {
                  "description": "The user name for login",
                  "in": "query",
                  "name": "username",
                  "required": true,
                  "type": "string",
                },
                Object {
                  "description": "The password for login in clear text",
                  "in": "query",
                  "name": "password",
                  "required": true,
                  "type": "string",
                },
              ],
              "produces": Array [
                "application/xml",
                "application/json",
              ],
              "responses": Object {
                "200": Object {
                  "description": "successful operation",
                  "headers": Object {
                    "X-Expires-After": Object {
                      "description": "date in UTC when token expires",
                      "format": "date-time",
                      "type": "string",
                    },
                    "X-Rate-Limit": Object {
                      "description": "calls per hour allowed by the user",
                      "format": "int32",
                      "type": "integer",
                    },
                  },
                  "schema": Object {
                    "type": "string",
                  },
                },
                "400": Object {
                  "description": "Invalid username/password supplied",
                },
              },
              "summary": "Logs user into the system",
              "tags": Array [
                "user",
              ],
            },
          },
          "/user/logout": Object {
            "get": Object {
              "description": "",
              "operationId": "logoutUser",
              "parameters": Array [],
              "produces": Array [
                "application/xml",
                "application/json",
              ],
              "responses": Object {
                "default": Object {
                  "description": "successful operation",
                },
              },
              "summary": "Logs out current logged in user session",
              "tags": Array [
                "user",
              ],
            },
          },
          "/user/{username}": Object {
            "delete": Object {
              "description": "This can only be done by the logged in user.",
              "operationId": "deleteUser",
              "parameters": Array [
                Object {
                  "description": "The name that needs to be deleted",
                  "in": "path",
                  "name": "username",
                  "required": true,
                  "type": "string",
                },
              ],
              "produces": Array [
                "application/xml",
                "application/json",
              ],
              "responses": Object {
                "400": Object {
                  "description": "Invalid username supplied",
                },
                "404": Object {
                  "description": "User not found",
                },
              },
              "summary": "Delete user",
              "tags": Array [
                "user",
              ],
            },
            "get": Object {
              "description": "",
              "operationId": "getUserByName",
              "parameters": Array [
                Object {
                  "description": "The name that needs to be fetched. Use user1 for testing. ",
                  "in": "path",
                  "name": "username",
                  "required": true,
                  "type": "string",
                },
              ],
              "produces": Array [
                "application/xml",
                "application/json",
              ],
              "responses": Object {
                "200": Object {
                  "description": "successful operation",
                  "schema": Object {
                    "$ref": "#/definitions/User",
                  },
                },
                "400": Object {
                  "description": "Invalid username supplied",
                },
                "404": Object {
                  "description": "User not found",
                },
              },
              "summary": "Get user by user name",
              "tags": Array [
                "user",
              ],
            },
            "put": Object {
              "description": "This can only be done by the logged in user.",
              "operationId": "updateUser",
              "parameters": Array [
                Object {
                  "description": "name that need to be updated",
                  "in": "path",
                  "name": "username",
                  "required": true,
                  "type": "string",
                },
                Object {
                  "description": "Updated user object",
                  "in": "body",
                  "name": "body",
                  "required": true,
                  "schema": Object {
                    "$ref": "#/definitions/User",
                  },
                },
              ],
              "produces": Array [
                "application/xml",
                "application/json",
              ],
              "responses": Object {
                "400": Object {
                  "description": "Invalid user supplied",
                },
                "404": Object {
                  "description": "User not found",
                },
              },
              "summary": "Updated user",
              "tags": Array [
                "user",
              ],
            },
          },
        },
        "schemes": Array [
          "https",
          "http",
        ],
        "securityDefinitions": Object {
          "api_key": Object {
            "in": "header",
            "name": "api_key",
            "type": "apiKey",
          },
          "petstore_auth": Object {
            "authorizationUrl": "https://petstore.swagger.io/oauth/dialog",
            "flow": "implicit",
            "scopes": Object {
              "read:pets": "read your pets",
              "write:pets": "modify pets in your account",
            },
            "type": "oauth2",
          },
        },
        "swagger": "2.0",
        "tags": Array [
          Object {
            "description": "Everything about your Pets",
            "externalDocs": Object {
              "description": "Find out more",
              "url": "http://swagger.io",
            },
            "name": "pet",
          },
          Object {
            "description": "Access to Petstore orders",
            "name": "store",
          },
          Object {
            "description": "Operations about user",
            "externalDocs": Object {
              "description": "Find out more about our store",
              "url": "http://swagger.io",
            },
            "name": "user",
          },
        ],
      },
      "pointers": Object {},
      "validations": Array [],
    },
    "contentType": "oas2",
    "id": "123",
    "loadContent": [Function],
    "type": "parsed",
  },
  Object {
    "id": "shared",
    "loadContent": [Function],
    "type": "oas2_shared",
  },
  Object {
    "content": Object {
      "api_key": Object {
        "in": "header",
        "name": "api_key",
        "type": "apiKey",
      },
      "petstore_auth": Object {
        "authorizationUrl": "https://petstore.swagger.io/oauth/dialog",
        "flow": "implicit",
        "scopes": Object {
          "read:pets": "read your pets",
          "write:pets": "modify pets in your account",
        },
        "type": "oauth2",
      },
    },
    "contentType": "oas2_security_schemes",
    "id": "securityDefinitions",
    "loadContent": [Function],
    "type": "oas2_security_schemes",
  },
  Object {
    "content": Object {
      "authorizationUrl": "https://petstore.swagger.io/oauth/dialog",
      "flow": "implicit",
      "scopes": Object {
        "read:pets": "read your pets",
        "write:pets": "modify pets in your account",
      },
      "type": "oauth2",
    },
    "id": "petstore_auth",
    "loadContent": [Function],
    "type": "oas2_security_scheme",
  },
  Object {
    "content": Object {
      "in": "header",
      "name": "api_key",
      "type": "apiKey",
    },
    "id": "api_key",
    "loadContent": [Function],
    "type": "oas2_security_scheme",
  },
  Object {
    "content": Array [
      Object {
        "description": "Everything about your Pets",
        "externalDocs": Object {
          "description": "Find out more",
          "url": "http://swagger.io",
        },
        "name": "pet",
      },
      Object {
        "description": "Access to Petstore orders",
        "name": "store",
      },
      Object {
        "description": "Operations about user",
        "externalDocs": Object {
          "description": "Find out more about our store",
          "url": "http://swagger.io",
        },
        "name": "user",
      },
    ],
    "contentType": "oas2_tags",
    "id": "tags",
    "loadContent": [Function],
    "type": "oas2_tags",
  },
  Object {
    "content": Object {
      "description": "Everything about your Pets",
      "externalDocs": Object {
        "description": "Find out more",
        "url": "http://swagger.io",
      },
      "name": "pet",
    },
    "id": "pet",
    "loadContent": [Function],
    "type": "oas2_tag",
  },
  Object {
    "content": Object {
      "description": "Access to Petstore orders",
      "name": "store",
    },
    "id": "store",
    "loadContent": [Function],
    "type": "oas2_tag",
  },
  Object {
    "content": Object {
      "description": "Operations about user",
      "externalDocs": Object {
        "description": "Find out more about our store",
        "url": "http://swagger.io",
      },
      "name": "user",
    },
    "id": "user",
    "loadContent": [Function],
    "type": "oas2_tag",
  },
  Object {
    "content": Object {
      "/pet": Object {
        "post": Object {
          "consumes": Array [
            "application/json",
            "application/xml",
          ],
          "description": "",
          "operationId": "addPet",
          "parameters": Array [
            Object {
              "description": "Pet object that needs to be added to the store",
              "in": "body",
              "name": "body",
              "required": true,
              "schema": Object {
                "$ref": "#/definitions/Pet",
              },
            },
          ],
          "produces": Array [
            "application/xml",
            "application/json",
          ],
          "responses": Object {
            "405": Object {
              "description": "Invalid input",
            },
          },
          "security": Array [
            Object {
              "petstore_auth": Array [
                "write:pets",
                "read:pets",
              ],
            },
          ],
          "summary": "Add a new pet to the store",
          "tags": Array [
            "pet",
          ],
        },
        "put": Object {
          "consumes": Array [
            "application/json",
            "application/xml",
          ],
          "description": "",
          "operationId": "updatePet",
          "parameters": Array [
            Object {
              "description": "Pet object that needs to be added to the store",
              "in": "body",
              "name": "body",
              "required": true,
              "schema": Object {
                "$ref": "#/definitions/Pet",
              },
            },
          ],
          "produces": Array [
            "application/xml",
            "application/json",
          ],
          "responses": Object {
            "400": Object {
              "description": "Invalid ID supplied",
            },
            "404": Object {
              "description": "Pet not found",
            },
            "405": Object {
              "description": "Validation exception",
            },
          },
          "security": Array [
            Object {
              "petstore_auth": Array [
                "write:pets",
                "read:pets",
              ],
            },
          ],
          "summary": "Update an existing pet",
          "tags": Array [
            "pet",
          ],
        },
      },
      "/pet/findByStatus": Object {
        "get": Object {
          "description": "Multiple status values can be provided with comma separated strings",
          "operationId": "findPetsByStatus",
          "parameters": Array [
            Object {
              "collectionFormat": "multi",
              "description": "Status values that need to be considered for filter",
              "in": "query",
              "items": Object {
                "default": "available",
                "enum": Array [
                  "available",
                  "pending",
                  "sold",
                ],
                "type": "string",
              },
              "name": "status",
              "required": true,
              "type": "array",
            },
          ],
          "produces": Array [
            "application/xml",
            "application/json",
          ],
          "responses": Object {
            "200": Object {
              "description": "successful operation",
              "schema": Object {
                "items": Object {
                  "$ref": "#/definitions/Pet",
                },
                "type": "array",
              },
            },
            "400": Object {
              "description": "Invalid status value",
            },
          },
          "security": Array [
            Object {
              "petstore_auth": Array [
                "write:pets",
                "read:pets",
              ],
            },
          ],
          "summary": "Finds Pets by status",
          "tags": Array [
            "pet",
          ],
        },
      },
      "/pet/findByTags": Object {
        "get": Object {
          "deprecated": true,
          "description": "Muliple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.",
          "operationId": "findPetsByTags",
          "parameters": Array [
            Object {
              "collectionFormat": "multi",
              "description": "Tags to filter by",
              "in": "query",
              "items": Object {
                "type": "string",
              },
              "name": "tags",
              "required": true,
              "type": "array",
            },
          ],
          "produces": Array [
            "application/xml",
            "application/json",
          ],
          "responses": Object {
            "200": Object {
              "description": "successful operation",
              "schema": Object {
                "items": Object {
                  "$ref": "#/definitions/Pet",
                },
                "type": "array",
              },
            },
            "400": Object {
              "description": "Invalid tag value",
            },
          },
          "security": Array [
            Object {
              "petstore_auth": Array [
                "write:pets",
                "read:pets",
              ],
            },
          ],
          "summary": "Finds Pets by tags",
          "tags": Array [
            "pet",
          ],
        },
      },
      "/pet/{petId}": Object {
        "delete": Object {
          "description": "",
          "operationId": "deletePet",
          "parameters": Array [
            Object {
              "in": "header",
              "name": "api_key",
              "required": false,
              "type": "string",
            },
            Object {
              "description": "Pet id to delete",
              "format": "int64",
              "in": "path",
              "name": "petId",
              "required": true,
              "type": "integer",
            },
          ],
          "produces": Array [
            "application/xml",
            "application/json",
          ],
          "responses": Object {
            "400": Object {
              "description": "Invalid ID supplied",
            },
            "404": Object {
              "description": "Pet not found",
            },
          },
          "security": Array [
            Object {
              "petstore_auth": Array [
                "write:pets",
                "read:pets",
              ],
            },
          ],
          "summary": "Deletes a pet",
          "tags": Array [
            "pet",
          ],
        },
        "get": Object {
          "description": "Returns a single pet",
          "operationId": "getPetById",
          "parameters": Array [
            Object {
              "description": "ID of pet to return",
              "format": "int64",
              "in": "path",
              "name": "petId",
              "required": true,
              "type": "integer",
            },
          ],
          "produces": Array [
            "application/xml",
            "application/json",
          ],
          "responses": Object {
            "200": Object {
              "description": "successful operation",
              "schema": Object {
                "$ref": "#/definitions/Pet",
              },
            },
            "400": Object {
              "description": "Invalid ID supplied",
            },
            "404": Object {
              "description": "Pet not found",
            },
          },
          "security": Array [
            Object {
              "api_key": Array [],
            },
          ],
          "summary": "Find pet by ID",
          "tags": Array [
            "pet",
          ],
        },
        "post": Object {
          "consumes": Array [
            "application/x-www-form-urlencoded",
          ],
          "description": "",
          "operationId": "updatePetWithForm",
          "parameters": Array [
            Object {
              "description": "ID of pet that needs to be updated",
              "format": "int64",
              "in": "path",
              "name": "petId",
              "required": true,
              "type": "integer",
            },
            Object {
              "description": "Updated name of the pet",
              "in": "formData",
              "name": "name",
              "required": false,
              "type": "string",
            },
            Object {
              "description": "Updated status of the pet",
              "in": "formData",
              "name": "status",
              "required": false,
              "type": "string",
            },
          ],
          "produces": Array [
            "application/xml",
            "application/json",
          ],
          "responses": Object {
            "405": Object {
              "description": "Invalid input",
            },
          },
          "security": Array [
            Object {
              "petstore_auth": Array [
                "write:pets",
                "read:pets",
              ],
            },
          ],
          "summary": "Updates a pet in the store with form data",
          "tags": Array [
            "pet",
          ],
        },
      },
      "/pet/{petId}/uploadImage": Object {
        "post": Object {
          "consumes": Array [
            "multipart/form-data",
          ],
          "description": "",
          "operationId": "uploadFile",
          "parameters": Array [
            Object {
              "description": "ID of pet to update",
              "format": "int64",
              "in": "path",
              "name": "petId",
              "required": true,
              "type": "integer",
            },
            Object {
              "description": "Additional data to pass to server",
              "in": "formData",
              "name": "additionalMetadata",
              "required": false,
              "type": "string",
            },
            Object {
              "description": "file to upload",
              "in": "formData",
              "name": "file",
              "required": false,
              "type": "file",
            },
          ],
          "produces": Array [
            "application/json",
          ],
          "responses": Object {
            "200": Object {
              "description": "successful operation",
              "schema": Object {
                "$ref": "#/definitions/ApiResponse",
              },
            },
          },
          "security": Array [
            Object {
              "petstore_auth": Array [
                "write:pets",
                "read:pets",
              ],
            },
          ],
          "summary": "uploads an image",
          "tags": Array [
            "pet",
          ],
        },
      },
      "/store/inventory": Object {
        "get": Object {
          "description": "Returns a map of status codes to quantities",
          "operationId": "getInventory",
          "parameters": Array [],
          "produces": Array [
            "application/json",
          ],
          "responses": Object {
            "200": Object {
              "description": "successful operation",
              "schema": Object {
                "additionalProperties": Object {
                  "format": "int32",
                  "type": "integer",
                },
                "type": "object",
              },
            },
          },
          "security": Array [
            Object {
              "api_key": Array [],
            },
          ],
          "summary": "Returns pet inventories by status",
          "tags": Array [
            "store",
          ],
        },
      },
      "/store/order": Object {
        "post": Object {
          "description": "",
          "operationId": "placeOrder",
          "parameters": Array [
            Object {
              "description": "order placed for purchasing the pet",
              "in": "body",
              "name": "body",
              "required": true,
              "schema": Object {
                "$ref": "#/definitions/Order",
              },
            },
          ],
          "produces": Array [
            "application/xml",
            "application/json",
          ],
          "responses": Object {
            "200": Object {
              "description": "successful operation",
              "schema": Object {
                "$ref": "#/definitions/Order",
              },
            },
            "400": Object {
              "description": "Invalid Order",
            },
          },
          "summary": "Place an order for a pet",
          "tags": Array [
            "store",
          ],
        },
      },
      "/store/order/{orderId}": Object {
        "delete": Object {
          "description": "For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors",
          "operationId": "deleteOrder",
          "parameters": Array [
            Object {
              "description": "ID of the order that needs to be deleted",
              "format": "int64",
              "in": "path",
              "minimum": 1,
              "name": "orderId",
              "required": true,
              "type": "integer",
            },
          ],
          "produces": Array [
            "application/xml",
            "application/json",
          ],
          "responses": Object {
            "400": Object {
              "description": "Invalid ID supplied",
            },
            "404": Object {
              "description": "Order not found",
            },
          },
          "summary": "Delete purchase order by ID",
          "tags": Array [
            "store",
          ],
        },
        "get": Object {
          "description": "For valid response try integer IDs with value >= 1 and <= 10. Other values will generated exceptions",
          "operationId": "getOrderById",
          "parameters": Array [
            Object {
              "description": "ID of pet that needs to be fetched",
              "format": "int64",
              "in": "path",
              "maximum": 10,
              "minimum": 1,
              "name": "orderId",
              "required": true,
              "type": "integer",
            },
          ],
          "produces": Array [
            "application/xml",
            "application/json",
          ],
          "responses": Object {
            "200": Object {
              "description": "successful operation",
              "schema": Object {
                "$ref": "#/definitions/Order",
              },
            },
            "400": Object {
              "description": "Invalid ID supplied",
            },
            "404": Object {
              "description": "Order not found",
            },
          },
          "summary": "Find purchase order by ID",
          "tags": Array [
            "store",
          ],
        },
      },
      "/user": Object {
        "post": Object {
          "description": "This can only be done by the logged in user.",
          "operationId": "createUser",
          "parameters": Array [
            Object {
              "description": "Created user object",
              "in": "body",
              "name": "body",
              "required": true,
              "schema": Object {
                "$ref": "#/definitions/User",
              },
            },
          ],
          "produces": Array [
            "application/xml",
            "application/json",
          ],
          "responses": Object {
            "default": Object {
              "description": "successful operation",
            },
          },
          "summary": "Create user",
          "tags": Array [
            "user",
          ],
        },
      },
      "/user/createWithArray": Object {
        "post": Object {
          "description": "",
          "operationId": "createUsersWithArrayInput",
          "parameters": Array [
            Object {
              "description": "List of user object",
              "in": "body",
              "name": "body",
              "required": true,
              "schema": Object {
                "items": Object {
                  "$ref": "#/definitions/User",
                },
                "type": "array",
              },
            },
          ],
          "produces": Array [
            "application/xml",
            "application/json",
          ],
          "responses": Object {
            "default": Object {
              "description": "successful operation",
            },
          },
          "summary": "Creates list of users with given input array",
          "tags": Array [
            "user",
          ],
        },
      },
      "/user/createWithList": Object {
        "post": Object {
          "description": "",
          "operationId": "createUsersWithListInput",
          "parameters": Array [
            Object {
              "description": "List of user object",
              "in": "body",
              "name": "body",
              "required": true,
              "schema": Object {
                "items": Object {
                  "$ref": "#/definitions/User",
                },
                "type": "array",
              },
            },
          ],
          "produces": Array [
            "application/xml",
            "application/json",
          ],
          "responses": Object {
            "default": Object {
              "description": "successful operation",
            },
          },
          "summary": "Creates list of users with given input array",
          "tags": Array [
            "user",
          ],
        },
      },
      "/user/login": Object {
        "get": Object {
          "description": "",
          "operationId": "loginUser",
          "parameters": Array [
            Object {
              "description": "The user name for login",
              "in": "query",
              "name": "username",
              "required": true,
              "type": "string",
            },
            Object {
              "description": "The password for login in clear text",
              "in": "query",
              "name": "password",
              "required": true,
              "type": "string",
            },
          ],
          "produces": Array [
            "application/xml",
            "application/json",
          ],
          "responses": Object {
            "200": Object {
              "description": "successful operation",
              "headers": Object {
                "X-Expires-After": Object {
                  "description": "date in UTC when token expires",
                  "format": "date-time",
                  "type": "string",
                },
                "X-Rate-Limit": Object {
                  "description": "calls per hour allowed by the user",
                  "format": "int32",
                  "type": "integer",
                },
              },
              "schema": Object {
                "type": "string",
              },
            },
            "400": Object {
              "description": "Invalid username/password supplied",
            },
          },
          "summary": "Logs user into the system",
          "tags": Array [
            "user",
          ],
        },
      },
      "/user/logout": Object {
        "get": Object {
          "description": "",
          "operationId": "logoutUser",
          "parameters": Array [],
          "produces": Array [
            "application/xml",
            "application/json",
          ],
          "responses": Object {
            "default": Object {
              "description": "successful operation",
            },
          },
          "summary": "Logs out current logged in user session",
          "tags": Array [
            "user",
          ],
        },
      },
      "/user/{username}": Object {
        "delete": Object {
          "description": "This can only be done by the logged in user.",
          "operationId": "deleteUser",
          "parameters": Array [
            Object {
              "description": "The name that needs to be deleted",
              "in": "path",
              "name": "username",
              "required": true,
              "type": "string",
            },
          ],
          "produces": Array [
            "application/xml",
            "application/json",
          ],
          "responses": Object {
            "400": Object {
              "description": "Invalid username supplied",
            },
            "404": Object {
              "description": "User not found",
            },
          },
          "summary": "Delete user",
          "tags": Array [
            "user",
          ],
        },
        "get": Object {
          "description": "",
          "operationId": "getUserByName",
          "parameters": Array [
            Object {
              "description": "The name that needs to be fetched. Use user1 for testing. ",
              "in": "path",
              "name": "username",
              "required": true,
              "type": "string",
            },
          ],
          "produces": Array [
            "application/xml",
            "application/json",
          ],
          "responses": Object {
            "200": Object {
              "description": "successful operation",
              "schema": Object {
                "$ref": "#/definitions/User",
              },
            },
            "400": Object {
              "description": "Invalid username supplied",
            },
            "404": Object {
              "description": "User not found",
            },
          },
          "summary": "Get user by user name",
          "tags": Array [
            "user",
          ],
        },
        "put": Object {
          "description": "This can only be done by the logged in user.",
          "operationId": "updateUser",
          "parameters": Array [
            Object {
              "description": "name that need to be updated",
              "in": "path",
              "name": "username",
              "required": true,
              "type": "string",
            },
            Object {
              "description": "Updated user object",
              "in": "body",
              "name": "body",
              "required": true,
              "schema": Object {
                "$ref": "#/definitions/User",
              },
            },
          ],
          "produces": Array [
            "application/xml",
            "application/json",
          ],
          "responses": Object {
            "400": Object {
              "description": "Invalid user supplied",
            },
            "404": Object {
              "description": "User not found",
            },
          },
          "summary": "Updated user",
          "tags": Array [
            "user",
          ],
        },
      },
    },
    "contentType": "oas2_paths",
    "id": "paths",
    "loadContent": [Function],
    "type": "oas2_paths",
  },
  Object {
    "content": Object {
      "post": Object {
        "consumes": Array [
          "application/json",
          "application/xml",
        ],
        "description": "",
        "operationId": "addPet",
        "parameters": Array [
          Object {
            "description": "Pet object that needs to be added to the store",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": Object {
              "$ref": "#/definitions/Pet",
            },
          },
        ],
        "produces": Array [
          "application/xml",
          "application/json",
        ],
        "responses": Object {
          "405": Object {
            "description": "Invalid input",
          },
        },
        "security": Array [
          Object {
            "petstore_auth": Array [
              "write:pets",
              "read:pets",
            ],
          },
        ],
        "summary": "Add a new pet to the store",
        "tags": Array [
          "pet",
        ],
      },
      "put": Object {
        "consumes": Array [
          "application/json",
          "application/xml",
        ],
        "description": "",
        "operationId": "updatePet",
        "parameters": Array [
          Object {
            "description": "Pet object that needs to be added to the store",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": Object {
              "$ref": "#/definitions/Pet",
            },
          },
        ],
        "produces": Array [
          "application/xml",
          "application/json",
        ],
        "responses": Object {
          "400": Object {
            "description": "Invalid ID supplied",
          },
          "404": Object {
            "description": "Pet not found",
          },
          "405": Object {
            "description": "Validation exception",
          },
        },
        "security": Array [
          Object {
            "petstore_auth": Array [
              "write:pets",
              "read:pets",
            ],
          },
        ],
        "summary": "Update an existing pet",
        "tags": Array [
          "pet",
        ],
      },
    },
    "id": "/pet",
    "loadContent": [Function],
    "type": "oas2_path",
  },
  Object {
    "content": Object {
      "consumes": Array [
        "application/json",
        "application/xml",
      ],
      "description": "",
      "operationId": "updatePet",
      "parameters": Array [
        Object {
          "description": "Pet object that needs to be added to the store",
          "in": "body",
          "name": "body",
          "required": true,
          "schema": Object {
            "$ref": "#/definitions/Pet",
          },
        },
      ],
      "produces": Array [
        "application/xml",
        "application/json",
      ],
      "responses": Object {
        "400": Object {
          "description": "Invalid ID supplied",
        },
        "404": Object {
          "description": "Pet not found",
        },
        "405": Object {
          "description": "Validation exception",
        },
      },
      "security": Array [
        Object {
          "petstore_auth": Array [
            "write:pets",
            "read:pets",
          ],
        },
      ],
      "summary": "Update an existing pet",
      "tags": Array [
        "pet",
      ],
    },
    "id": "/pet_put",
    "loadContent": [Function],
    "type": "oas2_operation",
  },
  Object {
    "content": Object {
      "description": "Pet object that needs to be added to the store",
      "in": "body",
      "name": "body",
      "required": true,
      "schema": Object {
        "$ref": "#/definitions/Pet",
      },
    },
    "id": "/pet_put_body",
    "loadContent": [Function],
    "type": "oas2_body",
  },
  Object {
    "content": Object {
      "400": Object {
        "description": "Invalid ID supplied",
      },
      "404": Object {
        "description": "Pet not found",
      },
      "405": Object {
        "description": "Validation exception",
      },
    },
    "id": "/pet_put_responses",
    "loadContent": [Function],
    "type": "oas2_responses",
  },
  Object {
    "content": Object {
      "description": "Invalid ID supplied",
    },
    "id": "/pet_put_responses_400",
    "loadContent": [Function],
    "type": "oas2_response",
  },
  Object {
    "content": Object {
      "description": "Pet not found",
    },
    "id": "/pet_put_responses_404",
    "loadContent": [Function],
    "type": "oas2_response",
  },
  Object {
    "content": Object {
      "description": "Validation exception",
    },
    "id": "/pet_put_responses_405",
    "loadContent": [Function],
    "type": "oas2_response",
  },
  Object {
    "content": Object {
      "deprecated": undefined,
      "description": "",
      "id": "?http-operation-id?",
      "iid": "updatePet",
      "method": "put",
      "path": "/pet",
      "request": Object {
        "body": Object {
          "contents": Array [
            Object {
              "mediaType": "application/json",
              "schema": Object {
                "$ref": "#/definitions/Pet",
              },
            },
            Object {
              "mediaType": "application/xml",
              "schema": Object {
                "$ref": "#/definitions/Pet",
              },
            },
          ],
          "description": "Pet object that needs to be added to the store",
          "required": true,
        },
      },
      "responses": Array [
        Object {
          "code": "400",
          "contents": Array [
            Object {
              "examples": Array [],
              "mediaType": "application/xml",
              "schema": undefined,
            },
            Object {
              "examples": Array [],
              "mediaType": "application/json",
              "schema": undefined,
            },
          ],
          "description": "Invalid ID supplied",
          "headers": Array [],
        },
        Object {
          "code": "404",
          "contents": Array [
            Object {
              "examples": Array [],
              "mediaType": "application/xml",
              "schema": undefined,
            },
            Object {
              "examples": Array [],
              "mediaType": "application/json",
              "schema": undefined,
            },
          ],
          "description": "Pet not found",
          "headers": Array [],
        },
        Object {
          "code": "405",
          "contents": Array [
            Object {
              "examples": Array [],
              "mediaType": "application/xml",
              "schema": undefined,
            },
            Object {
              "examples": Array [],
              "mediaType": "application/json",
              "schema": undefined,
            },
          ],
          "description": "Validation exception",
          "headers": Array [],
        },
      ],
      "security": Array [],
      "servers": Array [],
      "summary": "Update an existing pet",
      "tags": Array [
        Object {
          "name": "pet",
        },
      ],
    },
    "id": "/pet_put-oas2_http_operation",
    "loadContent": [Function],
    "type": "oas2_http_operation",
  },
  Object {
    "content": Object {
      "consumes": Array [
        "application/json",
        "application/xml",
      ],
      "description": "",
      "operationId": "addPet",
      "parameters": Array [
        Object {
          "description": "Pet object that needs to be added to the store",
          "in": "body",
          "name": "body",
          "required": true,
          "schema": Object {
            "$ref": "#/definitions/Pet",
          },
        },
      ],
      "produces": Array [
        "application/xml",
        "application/json",
      ],
      "responses": Object {
        "405": Object {
          "description": "Invalid input",
        },
      },
      "security": Array [
        Object {
          "petstore_auth": Array [
            "write:pets",
            "read:pets",
          ],
        },
      ],
      "summary": "Add a new pet to the store",
      "tags": Array [
        "pet",
      ],
    },
    "id": "/pet_post",
    "loadContent": [Function],
    "type": "oas2_operation",
  },
  Object {
    "content": Object {
      "description": "Pet object that needs to be added to the store",
      "in": "body",
      "name": "body",
      "required": true,
      "schema": Object {
        "$ref": "#/definitions/Pet",
      },
    },
    "id": "/pet_post_body",
    "loadContent": [Function],
    "type": "oas2_body",
  },
  Object {
    "content": Object {
      "405": Object {
        "description": "Invalid input",
      },
    },
    "id": "/pet_post_responses",
    "loadContent": [Function],
    "type": "oas2_responses",
  },
  Object {
    "content": Object {
      "description": "Invalid input",
    },
    "id": "/pet_post_responses_405",
    "loadContent": [Function],
    "type": "oas2_response",
  },
  Object {
    "content": Object {
      "deprecated": undefined,
      "description": "",
      "id": "?http-operation-id?",
      "iid": "addPet",
      "method": "post",
      "path": "/pet",
      "request": Object {
        "body": Object {
          "contents": Array [
            Object {
              "mediaType": "application/json",
              "schema": Object {
                "$ref": "#/definitions/Pet",
              },
            },
            Object {
              "mediaType": "application/xml",
              "schema": Object {
                "$ref": "#/definitions/Pet",
              },
            },
          ],
          "description": "Pet object that needs to be added to the store",
          "required": true,
        },
      },
      "responses": Array [
        Object {
          "code": "405",
          "contents": Array [
            Object {
              "examples": Array [],
              "mediaType": "application/xml",
              "schema": undefined,
            },
            Object {
              "examples": Array [],
              "mediaType": "application/json",
              "schema": undefined,
            },
          ],
          "description": "Invalid input",
          "headers": Array [],
        },
      ],
      "security": Array [],
      "servers": Array [],
      "summary": "Add a new pet to the store",
      "tags": Array [
        Object {
          "name": "pet",
        },
      ],
    },
    "id": "/pet_post-oas2_http_operation",
    "loadContent": [Function],
    "type": "oas2_http_operation",
  },
  Object {
    "content": Object {
      "get": Object {
        "description": "Multiple status values can be provided with comma separated strings",
        "operationId": "findPetsByStatus",
        "parameters": Array [
          Object {
            "collectionFormat": "multi",
            "description": "Status values that need to be considered for filter",
            "in": "query",
            "items": Object {
              "default": "available",
              "enum": Array [
                "available",
                "pending",
                "sold",
              ],
              "type": "string",
            },
            "name": "status",
            "required": true,
            "type": "array",
          },
        ],
        "produces": Array [
          "application/xml",
          "application/json",
        ],
        "responses": Object {
          "200": Object {
            "description": "successful operation",
            "schema": Object {
              "items": Object {
                "$ref": "#/definitions/Pet",
              },
              "type": "array",
            },
          },
          "400": Object {
            "description": "Invalid status value",
          },
        },
        "security": Array [
          Object {
            "petstore_auth": Array [
              "write:pets",
              "read:pets",
            ],
          },
        ],
        "summary": "Finds Pets by status",
        "tags": Array [
          "pet",
        ],
      },
    },
    "id": "/pet/findByStatus",
    "loadContent": [Function],
    "type": "oas2_path",
  },
  Object {
    "content": Object {
      "description": "Multiple status values can be provided with comma separated strings",
      "operationId": "findPetsByStatus",
      "parameters": Array [
        Object {
          "collectionFormat": "multi",
          "description": "Status values that need to be considered for filter",
          "in": "query",
          "items": Object {
            "default": "available",
            "enum": Array [
              "available",
              "pending",
              "sold",
            ],
            "type": "string",
          },
          "name": "status",
          "required": true,
          "type": "array",
        },
      ],
      "produces": Array [
        "application/xml",
        "application/json",
      ],
      "responses": Object {
        "200": Object {
          "description": "successful operation",
          "schema": Object {
            "items": Object {
              "$ref": "#/definitions/Pet",
            },
            "type": "array",
          },
        },
        "400": Object {
          "description": "Invalid status value",
        },
      },
      "security": Array [
        Object {
          "petstore_auth": Array [
            "write:pets",
            "read:pets",
          ],
        },
      ],
      "summary": "Finds Pets by status",
      "tags": Array [
        "pet",
      ],
    },
    "id": "/pet/findByStatus_get",
    "loadContent": [Function],
    "type": "oas2_operation",
  },
  Object {
    "content": Object {
      "collectionFormat": "multi",
      "description": "Status values that need to be considered for filter",
      "in": "query",
      "items": Object {
        "default": "available",
        "enum": Array [
          "available",
          "pending",
          "sold",
        ],
        "type": "string",
      },
      "name": "status",
      "required": true,
      "type": "array",
    },
    "id": "/pet/findByStatus_get_status",
    "loadContent": [Function],
    "type": "oas2_query",
  },
  Object {
    "content": Object {
      "200": Object {
        "description": "successful operation",
        "schema": Object {
          "items": Object {
            "$ref": "#/definitions/Pet",
          },
          "type": "array",
        },
      },
      "400": Object {
        "description": "Invalid status value",
      },
    },
    "id": "/pet/findByStatus_get_responses",
    "loadContent": [Function],
    "type": "oas2_responses",
  },
  Object {
    "content": Object {
      "description": "successful operation",
      "schema": Object {
        "items": Object {
          "$ref": "#/definitions/Pet",
        },
        "type": "array",
      },
    },
    "id": "/pet/findByStatus_get_responses_200",
    "loadContent": [Function],
    "type": "oas2_response",
  },
  Object {
    "content": Object {
      "description": "Invalid status value",
    },
    "id": "/pet/findByStatus_get_responses_400",
    "loadContent": [Function],
    "type": "oas2_response",
  },
  Object {
    "content": Object {
      "deprecated": undefined,
      "description": "Multiple status values can be provided with comma separated strings",
      "id": "?http-operation-id?",
      "iid": "findPetsByStatus",
      "method": "get",
      "path": "/pet/findByStatus",
      "request": Object {
        "query": Array [
          Object {
            "allowEmptyValue": undefined,
            "content": Object {
              "*": Object {
                "mediaType": "*",
                "schema": Object {
                  "collectionFormat": "multi",
                  "description": "Status values that need to be considered for filter",
                  "in": "query",
                  "items": Object {
                    "default": "available",
                    "enum": Array [
                      "available",
                      "pending",
                      "sold",
                    ],
                    "type": "string",
                  },
                  "name": "status",
                  "required": true,
                  "type": "array",
                },
              },
            },
            "description": "Status values that need to be considered for filter",
            "name": "status",
            "required": true,
            "style": "form",
          },
        ],
      },
      "responses": Array [
        Object {
          "code": "200",
          "contents": Array [
            Object {
              "examples": Array [],
              "mediaType": "application/xml",
              "schema": Object {
                "items": Object {
                  "$ref": "#/definitions/Pet",
                },
                "type": "array",
              },
            },
            Object {
              "examples": Array [],
              "mediaType": "application/json",
              "schema": Object {
                "items": Object {
                  "$ref": "#/definitions/Pet",
                },
                "type": "array",
              },
            },
          ],
          "description": "successful operation",
          "headers": Array [],
        },
        Object {
          "code": "400",
          "contents": Array [
            Object {
              "examples": Array [],
              "mediaType": "application/xml",
              "schema": undefined,
            },
            Object {
              "examples": Array [],
              "mediaType": "application/json",
              "schema": undefined,
            },
          ],
          "description": "Invalid status value",
          "headers": Array [],
        },
      ],
      "security": Array [],
      "servers": Array [],
      "summary": "Finds Pets by status",
      "tags": Array [
        Object {
          "name": "pet",
        },
      ],
    },
    "id": "/pet/findByStatus_get-oas2_http_operation",
    "loadContent": [Function],
    "type": "oas2_http_operation",
  },
  Object {
    "content": Object {
      "get": Object {
        "deprecated": true,
        "description": "Muliple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.",
        "operationId": "findPetsByTags",
        "parameters": Array [
          Object {
            "collectionFormat": "multi",
            "description": "Tags to filter by",
            "in": "query",
            "items": Object {
              "type": "string",
            },
            "name": "tags",
            "required": true,
            "type": "array",
          },
        ],
        "produces": Array [
          "application/xml",
          "application/json",
        ],
        "responses": Object {
          "200": Object {
            "description": "successful operation",
            "schema": Object {
              "items": Object {
                "$ref": "#/definitions/Pet",
              },
              "type": "array",
            },
          },
          "400": Object {
            "description": "Invalid tag value",
          },
        },
        "security": Array [
          Object {
            "petstore_auth": Array [
              "write:pets",
              "read:pets",
            ],
          },
        ],
        "summary": "Finds Pets by tags",
        "tags": Array [
          "pet",
        ],
      },
    },
    "id": "/pet/findByTags",
    "loadContent": [Function],
    "type": "oas2_path",
  },
  Object {
    "content": Object {
      "deprecated": true,
      "description": "Muliple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.",
      "operationId": "findPetsByTags",
      "parameters": Array [
        Object {
          "collectionFormat": "multi",
          "description": "Tags to filter by",
          "in": "query",
          "items": Object {
            "type": "string",
          },
          "name": "tags",
          "required": true,
          "type": "array",
        },
      ],
      "produces": Array [
        "application/xml",
        "application/json",
      ],
      "responses": Object {
        "200": Object {
          "description": "successful operation",
          "schema": Object {
            "items": Object {
              "$ref": "#/definitions/Pet",
            },
            "type": "array",
          },
        },
        "400": Object {
          "description": "Invalid tag value",
        },
      },
      "security": Array [
        Object {
          "petstore_auth": Array [
            "write:pets",
            "read:pets",
          ],
        },
      ],
      "summary": "Finds Pets by tags",
      "tags": Array [
        "pet",
      ],
    },
    "id": "/pet/findByTags_get",
    "loadContent": [Function],
    "type": "oas2_operation",
  },
  Object {
    "content": Object {
      "collectionFormat": "multi",
      "description": "Tags to filter by",
      "in": "query",
      "items": Object {
        "type": "string",
      },
      "name": "tags",
      "required": true,
      "type": "array",
    },
    "id": "/pet/findByTags_get_tags",
    "loadContent": [Function],
    "type": "oas2_query",
  },
  Object {
    "content": Object {
      "200": Object {
        "description": "successful operation",
        "schema": Object {
          "items": Object {
            "$ref": "#/definitions/Pet",
          },
          "type": "array",
        },
      },
      "400": Object {
        "description": "Invalid tag value",
      },
    },
    "id": "/pet/findByTags_get_responses",
    "loadContent": [Function],
    "type": "oas2_responses",
  },
  Object {
    "content": Object {
      "description": "successful operation",
      "schema": Object {
        "items": Object {
          "$ref": "#/definitions/Pet",
        },
        "type": "array",
      },
    },
    "id": "/pet/findByTags_get_responses_200",
    "loadContent": [Function],
    "type": "oas2_response",
  },
  Object {
    "content": Object {
      "description": "Invalid tag value",
    },
    "id": "/pet/findByTags_get_responses_400",
    "loadContent": [Function],
    "type": "oas2_response",
  },
  Object {
    "content": Object {
      "deprecated": true,
      "description": "Muliple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.",
      "id": "?http-operation-id?",
      "iid": "findPetsByTags",
      "method": "get",
      "path": "/pet/findByTags",
      "request": Object {
        "query": Array [
          Object {
            "allowEmptyValue": undefined,
            "content": Object {
              "*": Object {
                "mediaType": "*",
                "schema": Object {
                  "collectionFormat": "multi",
                  "description": "Tags to filter by",
                  "in": "query",
                  "items": Object {
                    "type": "string",
                  },
                  "name": "tags",
                  "required": true,
                  "type": "array",
                },
              },
            },
            "description": "Tags to filter by",
            "name": "tags",
            "required": true,
            "style": "form",
          },
        ],
      },
      "responses": Array [
        Object {
          "code": "200",
          "contents": Array [
            Object {
              "examples": Array [],
              "mediaType": "application/xml",
              "schema": Object {
                "items": Object {
                  "$ref": "#/definitions/Pet",
                },
                "type": "array",
              },
            },
            Object {
              "examples": Array [],
              "mediaType": "application/json",
              "schema": Object {
                "items": Object {
                  "$ref": "#/definitions/Pet",
                },
                "type": "array",
              },
            },
          ],
          "description": "successful operation",
          "headers": Array [],
        },
        Object {
          "code": "400",
          "contents": Array [
            Object {
              "examples": Array [],
              "mediaType": "application/xml",
              "schema": undefined,
            },
            Object {
              "examples": Array [],
              "mediaType": "application/json",
              "schema": undefined,
            },
          ],
          "description": "Invalid tag value",
          "headers": Array [],
        },
      ],
      "security": Array [],
      "servers": Array [],
      "summary": "Finds Pets by tags",
      "tags": Array [
        Object {
          "name": "pet",
        },
      ],
    },
    "id": "/pet/findByTags_get-oas2_http_operation",
    "loadContent": [Function],
    "type": "oas2_http_operation",
  },
  Object {
    "content": Object {
      "delete": Object {
        "description": "",
        "operationId": "deletePet",
        "parameters": Array [
          Object {
            "in": "header",
            "name": "api_key",
            "required": false,
            "type": "string",
          },
          Object {
            "description": "Pet id to delete",
            "format": "int64",
            "in": "path",
            "name": "petId",
            "required": true,
            "type": "integer",
          },
        ],
        "produces": Array [
          "application/xml",
          "application/json",
        ],
        "responses": Object {
          "400": Object {
            "description": "Invalid ID supplied",
          },
          "404": Object {
            "description": "Pet not found",
          },
        },
        "security": Array [
          Object {
            "petstore_auth": Array [
              "write:pets",
              "read:pets",
            ],
          },
        ],
        "summary": "Deletes a pet",
        "tags": Array [
          "pet",
        ],
      },
      "get": Object {
        "description": "Returns a single pet",
        "operationId": "getPetById",
        "parameters": Array [
          Object {
            "description": "ID of pet to return",
            "format": "int64",
            "in": "path",
            "name": "petId",
            "required": true,
            "type": "integer",
          },
        ],
        "produces": Array [
          "application/xml",
          "application/json",
        ],
        "responses": Object {
          "200": Object {
            "description": "successful operation",
            "schema": Object {
              "$ref": "#/definitions/Pet",
            },
          },
          "400": Object {
            "description": "Invalid ID supplied",
          },
          "404": Object {
            "description": "Pet not found",
          },
        },
        "security": Array [
          Object {
            "api_key": Array [],
          },
        ],
        "summary": "Find pet by ID",
        "tags": Array [
          "pet",
        ],
      },
      "post": Object {
        "consumes": Array [
          "application/x-www-form-urlencoded",
        ],
        "description": "",
        "operationId": "updatePetWithForm",
        "parameters": Array [
          Object {
            "description": "ID of pet that needs to be updated",
            "format": "int64",
            "in": "path",
            "name": "petId",
            "required": true,
            "type": "integer",
          },
          Object {
            "description": "Updated name of the pet",
            "in": "formData",
            "name": "name",
            "required": false,
            "type": "string",
          },
          Object {
            "description": "Updated status of the pet",
            "in": "formData",
            "name": "status",
            "required": false,
            "type": "string",
          },
        ],
        "produces": Array [
          "application/xml",
          "application/json",
        ],
        "responses": Object {
          "405": Object {
            "description": "Invalid input",
          },
        },
        "security": Array [
          Object {
            "petstore_auth": Array [
              "write:pets",
              "read:pets",
            ],
          },
        ],
        "summary": "Updates a pet in the store with form data",
        "tags": Array [
          "pet",
        ],
      },
    },
    "id": "/pet/{petId}",
    "loadContent": [Function],
    "type": "oas2_path",
  },
  Object {
    "content": Object {
      "description": "Returns a single pet",
      "operationId": "getPetById",
      "parameters": Array [
        Object {
          "description": "ID of pet to return",
          "format": "int64",
          "in": "path",
          "name": "petId",
          "required": true,
          "type": "integer",
        },
      ],
      "produces": Array [
        "application/xml",
        "application/json",
      ],
      "responses": Object {
        "200": Object {
          "description": "successful operation",
          "schema": Object {
            "$ref": "#/definitions/Pet",
          },
        },
        "400": Object {
          "description": "Invalid ID supplied",
        },
        "404": Object {
          "description": "Pet not found",
        },
      },
      "security": Array [
        Object {
          "api_key": Array [],
        },
      ],
      "summary": "Find pet by ID",
      "tags": Array [
        "pet",
      ],
    },
    "id": "/pet/{petId}_get",
    "loadContent": [Function],
    "type": "oas2_operation",
  },
  Object {
    "content": Object {
      "description": "ID of pet to return",
      "format": "int64",
      "in": "path",
      "name": "petId",
      "required": true,
      "type": "integer",
    },
    "id": "/pet/{petId}_get_petId",
    "loadContent": [Function],
    "type": "oas2_path",
  },
  Object {
    "content": Object {
      "200": Object {
        "description": "successful operation",
        "schema": Object {
          "$ref": "#/definitions/Pet",
        },
      },
      "400": Object {
        "description": "Invalid ID supplied",
      },
      "404": Object {
        "description": "Pet not found",
      },
    },
    "id": "/pet/{petId}_get_responses",
    "loadContent": [Function],
    "type": "oas2_responses",
  },
  Object {
    "content": Object {
      "description": "successful operation",
      "schema": Object {
        "$ref": "#/definitions/Pet",
      },
    },
    "id": "/pet/{petId}_get_responses_200",
    "loadContent": [Function],
    "type": "oas2_response",
  },
  Object {
    "content": Object {
      "description": "Invalid ID supplied",
    },
    "id": "/pet/{petId}_get_responses_400",
    "loadContent": [Function],
    "type": "oas2_response",
  },
  Object {
    "content": Object {
      "description": "Pet not found",
    },
    "id": "/pet/{petId}_get_responses_404",
    "loadContent": [Function],
    "type": "oas2_response",
  },
  Object {
    "content": Object {
      "deprecated": undefined,
      "description": "Returns a single pet",
      "id": "?http-operation-id?",
      "iid": "getPetById",
      "method": "get",
      "path": "/pet/{petId}",
      "request": Object {
        "path": Array [
          Object {
            "content": Object {
              "*": Object {
                "mediaType": "*",
                "schema": Object {
                  "description": "ID of pet to return",
                  "format": "int64",
                  "in": "path",
                  "name": "petId",
                  "required": true,
                  "type": "integer",
                },
              },
            },
            "description": "ID of pet to return",
            "name": "petId",
            "required": true,
            "style": "simple",
          },
        ],
      },
      "responses": Array [
        Object {
          "code": "200",
          "contents": Array [
            Object {
              "examples": Array [],
              "mediaType": "application/xml",
              "schema": Object {
                "$ref": "#/definitions/Pet",
              },
            },
            Object {
              "examples": Array [],
              "mediaType": "application/json",
              "schema": Object {
                "$ref": "#/definitions/Pet",
              },
            },
          ],
          "description": "successful operation",
          "headers": Array [],
        },
        Object {
          "code": "400",
          "contents": Array [
            Object {
              "examples": Array [],
              "mediaType": "application/xml",
              "schema": undefined,
            },
            Object {
              "examples": Array [],
              "mediaType": "application/json",
              "schema": undefined,
            },
          ],
          "description": "Invalid ID supplied",
          "headers": Array [],
        },
        Object {
          "code": "404",
          "contents": Array [
            Object {
              "examples": Array [],
              "mediaType": "application/xml",
              "schema": undefined,
            },
            Object {
              "examples": Array [],
              "mediaType": "application/json",
              "schema": undefined,
            },
          ],
          "description": "Pet not found",
          "headers": Array [],
        },
      ],
      "security": Array [],
      "servers": Array [],
      "summary": "Find pet by ID",
      "tags": Array [
        Object {
          "name": "pet",
        },
      ],
    },
    "id": "/pet/{petId}_get-oas2_http_operation",
    "loadContent": [Function],
    "type": "oas2_http_operation",
  },
  Object {
    "content": Object {
      "consumes": Array [
        "application/x-www-form-urlencoded",
      ],
      "description": "",
      "operationId": "updatePetWithForm",
      "parameters": Array [
        Object {
          "description": "ID of pet that needs to be updated",
          "format": "int64",
          "in": "path",
          "name": "petId",
          "required": true,
          "type": "integer",
        },
        Object {
          "description": "Updated name of the pet",
          "in": "formData",
          "name": "name",
          "required": false,
          "type": "string",
        },
        Object {
          "description": "Updated status of the pet",
          "in": "formData",
          "name": "status",
          "required": false,
          "type": "string",
        },
      ],
      "produces": Array [
        "application/xml",
        "application/json",
      ],
      "responses": Object {
        "405": Object {
          "description": "Invalid input",
        },
      },
      "security": Array [
        Object {
          "petstore_auth": Array [
            "write:pets",
            "read:pets",
          ],
        },
      ],
      "summary": "Updates a pet in the store with form data",
      "tags": Array [
        "pet",
      ],
    },
    "id": "/pet/{petId}_post",
    "loadContent": [Function],
    "type": "oas2_operation",
  },
  Object {
    "content": Object {
      "description": "ID of pet that needs to be updated",
      "format": "int64",
      "in": "path",
      "name": "petId",
      "required": true,
      "type": "integer",
    },
    "id": "/pet/{petId}_post_petId",
    "loadContent": [Function],
    "type": "oas2_path",
  },
  Object {
    "content": Object {
      "405": Object {
        "description": "Invalid input",
      },
    },
    "id": "/pet/{petId}_post_responses",
    "loadContent": [Function],
    "type": "oas2_responses",
  },
  Object {
    "content": Object {
      "description": "Invalid input",
    },
    "id": "/pet/{petId}_post_responses_405",
    "loadContent": [Function],
    "type": "oas2_response",
  },
  Object {
    "content": Object {
      "deprecated": undefined,
      "description": "",
      "id": "?http-operation-id?",
      "iid": "updatePetWithForm",
      "method": "post",
      "path": "/pet/{petId}",
      "request": Object {
        "body": Object {
          "contents": Array [
            Object {
              "encodings": Array [
                Object {
                  "property": "name",
                  "style": "form",
                },
                Object {
                  "property": "status",
                  "style": "form",
                },
              ],
              "mediaType": "application/x-www-form-urlencoded",
              "schema": Object {
                "description": "Updated name of the pet",
                "in": "formData",
                "name": "name",
                "required": false,
                "type": "string",
              },
            },
          ],
          "description": "Updated name of the pet",
          "required": false,
        },
        "path": Array [
          Object {
            "content": Object {
              "application/x-www-form-urlencoded": Object {
                "mediaType": "application/x-www-form-urlencoded",
                "schema": Object {
                  "description": "ID of pet that needs to be updated",
                  "format": "int64",
                  "in": "path",
                  "name": "petId",
                  "required": true,
                  "type": "integer",
                },
              },
            },
            "description": "ID of pet that needs to be updated",
            "name": "petId",
            "required": true,
            "style": "simple",
          },
        ],
      },
      "responses": Array [
        Object {
          "code": "405",
          "contents": Array [
            Object {
              "examples": Array [],
              "mediaType": "application/xml",
              "schema": undefined,
            },
            Object {
              "examples": Array [],
              "mediaType": "application/json",
              "schema": undefined,
            },
          ],
          "description": "Invalid input",
          "headers": Array [],
        },
      ],
      "security": Array [],
      "servers": Array [],
      "summary": "Updates a pet in the store with form data",
      "tags": Array [
        Object {
          "name": "pet",
        },
      ],
    },
    "id": "/pet/{petId}_post-oas2_http_operation",
    "loadContent": [Function],
    "type": "oas2_http_operation",
  },
  Object {
    "content": Object {
      "description": "",
      "operationId": "deletePet",
      "parameters": Array [
        Object {
          "in": "header",
          "name": "api_key",
          "required": false,
          "type": "string",
        },
        Object {
          "description": "Pet id to delete",
          "format": "int64",
          "in": "path",
          "name": "petId",
          "required": true,
          "type": "integer",
        },
      ],
      "produces": Array [
        "application/xml",
        "application/json",
      ],
      "responses": Object {
        "400": Object {
          "description": "Invalid ID supplied",
        },
        "404": Object {
          "description": "Pet not found",
        },
      },
      "security": Array [
        Object {
          "petstore_auth": Array [
            "write:pets",
            "read:pets",
          ],
        },
      ],
      "summary": "Deletes a pet",
      "tags": Array [
        "pet",
      ],
    },
    "id": "/pet/{petId}_delete",
    "loadContent": [Function],
    "type": "oas2_operation",
  },
  Object {
    "content": Object {
      "in": "header",
      "name": "api_key",
      "required": false,
      "type": "string",
    },
    "id": "/pet/{petId}_delete_api_key",
    "loadContent": [Function],
    "type": "oas2_header",
  },
  Object {
    "content": Object {
      "description": "Pet id to delete",
      "format": "int64",
      "in": "path",
      "name": "petId",
      "required": true,
      "type": "integer",
    },
    "id": "/pet/{petId}_delete_petId",
    "loadContent": [Function],
    "type": "oas2_path",
  },
  Object {
    "content": Object {
      "400": Object {
        "description": "Invalid ID supplied",
      },
      "404": Object {
        "description": "Pet not found",
      },
    },
    "id": "/pet/{petId}_delete_responses",
    "loadContent": [Function],
    "type": "oas2_responses",
  },
  Object {
    "content": Object {
      "description": "Invalid ID supplied",
    },
    "id": "/pet/{petId}_delete_responses_400",
    "loadContent": [Function],
    "type": "oas2_response",
  },
  Object {
    "content": Object {
      "description": "Pet not found",
    },
    "id": "/pet/{petId}_delete_responses_404",
    "loadContent": [Function],
    "type": "oas2_response",
  },
  Object {
    "content": Object {
      "deprecated": undefined,
      "description": "",
      "id": "?http-operation-id?",
      "iid": "deletePet",
      "method": "delete",
      "path": "/pet/{petId}",
      "request": Object {
        "headers": Array [
          Object {
            "content": Object {
              "*": Object {
                "mediaType": "*",
                "schema": Object {
                  "in": "header",
                  "name": "api_key",
                  "required": false,
                  "type": "string",
                },
              },
            },
            "description": undefined,
            "name": "api_key",
            "required": false,
            "style": "simple",
          },
        ],
        "path": Array [
          Object {
            "content": Object {
              "*": Object {
                "mediaType": "*",
                "schema": Object {
                  "description": "Pet id to delete",
                  "format": "int64",
                  "in": "path",
                  "name": "petId",
                  "required": true,
                  "type": "integer",
                },
              },
            },
            "description": "Pet id to delete",
            "name": "petId",
            "required": true,
            "style": "simple",
          },
        ],
      },
      "responses": Array [
        Object {
          "code": "400",
          "contents": Array [
            Object {
              "examples": Array [],
              "mediaType": "application/xml",
              "schema": undefined,
            },
            Object {
              "examples": Array [],
              "mediaType": "application/json",
              "schema": undefined,
            },
          ],
          "description": "Invalid ID supplied",
          "headers": Array [],
        },
        Object {
          "code": "404",
          "contents": Array [
            Object {
              "examples": Array [],
              "mediaType": "application/xml",
              "schema": undefined,
            },
            Object {
              "examples": Array [],
              "mediaType": "application/json",
              "schema": undefined,
            },
          ],
          "description": "Pet not found",
          "headers": Array [],
        },
      ],
      "security": Array [],
      "servers": Array [],
      "summary": "Deletes a pet",
      "tags": Array [
        Object {
          "name": "pet",
        },
      ],
    },
    "id": "/pet/{petId}_delete-oas2_http_operation",
    "loadContent": [Function],
    "type": "oas2_http_operation",
  },
  Object {
    "content": Object {
      "post": Object {
        "consumes": Array [
          "multipart/form-data",
        ],
        "description": "",
        "operationId": "uploadFile",
        "parameters": Array [
          Object {
            "description": "ID of pet to update",
            "format": "int64",
            "in": "path",
            "name": "petId",
            "required": true,
            "type": "integer",
          },
          Object {
            "description": "Additional data to pass to server",
            "in": "formData",
            "name": "additionalMetadata",
            "required": false,
            "type": "string",
          },
          Object {
            "description": "file to upload",
            "in": "formData",
            "name": "file",
            "required": false,
            "type": "file",
          },
        ],
        "produces": Array [
          "application/json",
        ],
        "responses": Object {
          "200": Object {
            "description": "successful operation",
            "schema": Object {
              "$ref": "#/definitions/ApiResponse",
            },
          },
        },
        "security": Array [
          Object {
            "petstore_auth": Array [
              "write:pets",
              "read:pets",
            ],
          },
        ],
        "summary": "uploads an image",
        "tags": Array [
          "pet",
        ],
      },
    },
    "id": "/pet/{petId}/uploadImage",
    "loadContent": [Function],
    "type": "oas2_path",
  },
  Object {
    "content": Object {
      "consumes": Array [
        "multipart/form-data",
      ],
      "description": "",
      "operationId": "uploadFile",
      "parameters": Array [
        Object {
          "description": "ID of pet to update",
          "format": "int64",
          "in": "path",
          "name": "petId",
          "required": true,
          "type": "integer",
        },
        Object {
          "description": "Additional data to pass to server",
          "in": "formData",
          "name": "additionalMetadata",
          "required": false,
          "type": "string",
        },
        Object {
          "description": "file to upload",
          "in": "formData",
          "name": "file",
          "required": false,
          "type": "file",
        },
      ],
      "produces": Array [
        "application/json",
      ],
      "responses": Object {
        "200": Object {
          "description": "successful operation",
          "schema": Object {
            "$ref": "#/definitions/ApiResponse",
          },
        },
      },
      "security": Array [
        Object {
          "petstore_auth": Array [
            "write:pets",
            "read:pets",
          ],
        },
      ],
      "summary": "uploads an image",
      "tags": Array [
        "pet",
      ],
    },
    "id": "/pet/{petId}/uploadImage_post",
    "loadContent": [Function],
    "type": "oas2_operation",
  },
  Object {
    "content": Object {
      "description": "ID of pet to update",
      "format": "int64",
      "in": "path",
      "name": "petId",
      "required": true,
      "type": "integer",
    },
    "id": "/pet/{petId}/uploadImage_post_petId",
    "loadContent": [Function],
    "type": "oas2_path",
  },
  Object {
    "content": Object {
      "200": Object {
        "description": "successful operation",
        "schema": Object {
          "$ref": "#/definitions/ApiResponse",
        },
      },
    },
    "id": "/pet/{petId}/uploadImage_post_responses",
    "loadContent": [Function],
    "type": "oas2_responses",
  },
  Object {
    "content": Object {
      "description": "successful operation",
      "schema": Object {
        "$ref": "#/definitions/ApiResponse",
      },
    },
    "id": "/pet/{petId}/uploadImage_post_responses_200",
    "loadContent": [Function],
    "type": "oas2_response",
  },
  Object {
    "content": Object {
      "deprecated": undefined,
      "description": "",
      "id": "?http-operation-id?",
      "iid": "uploadFile",
      "method": "post",
      "path": "/pet/{petId}/uploadImage",
      "request": Object {
        "body": Object {
          "contents": Array [
            Object {
              "encodings": Array [
                Object {
                  "property": "additionalMetadata",
                  "style": "form",
                },
                Object {
                  "property": "file",
                  "style": "form",
                },
              ],
              "mediaType": "multipart/form-data",
              "schema": Object {
                "description": "Additional data to pass to server",
                "in": "formData",
                "name": "additionalMetadata",
                "required": false,
                "type": "string",
              },
            },
          ],
          "description": "Additional data to pass to server",
          "required": false,
        },
        "path": Array [
          Object {
            "content": Object {
              "multipart/form-data": Object {
                "mediaType": "multipart/form-data",
                "schema": Object {
                  "description": "ID of pet to update",
                  "format": "int64",
                  "in": "path",
                  "name": "petId",
                  "required": true,
                  "type": "integer",
                },
              },
            },
            "description": "ID of pet to update",
            "name": "petId",
            "required": true,
            "style": "simple",
          },
        ],
      },
      "responses": Array [
        Object {
          "code": "200",
          "contents": Array [
            Object {
              "examples": Array [],
              "mediaType": "application/json",
              "schema": Object {
                "$ref": "#/definitions/ApiResponse",
              },
            },
          ],
          "description": "successful operation",
          "headers": Array [],
        },
      ],
      "security": Array [],
      "servers": Array [],
      "summary": "uploads an image",
      "tags": Array [
        Object {
          "name": "pet",
        },
      ],
    },
    "id": "/pet/{petId}/uploadImage_post-oas2_http_operation",
    "loadContent": [Function],
    "type": "oas2_http_operation",
  },
  Object {
    "content": Object {
      "get": Object {
        "description": "Returns a map of status codes to quantities",
        "operationId": "getInventory",
        "parameters": Array [],
        "produces": Array [
          "application/json",
        ],
        "responses": Object {
          "200": Object {
            "description": "successful operation",
            "schema": Object {
              "additionalProperties": Object {
                "format": "int32",
                "type": "integer",
              },
              "type": "object",
            },
          },
        },
        "security": Array [
          Object {
            "api_key": Array [],
          },
        ],
        "summary": "Returns pet inventories by status",
        "tags": Array [
          "store",
        ],
      },
    },
    "id": "/store/inventory",
    "loadContent": [Function],
    "type": "oas2_path",
  },
  Object {
    "content": Object {
      "description": "Returns a map of status codes to quantities",
      "operationId": "getInventory",
      "parameters": Array [],
      "produces": Array [
        "application/json",
      ],
      "responses": Object {
        "200": Object {
          "description": "successful operation",
          "schema": Object {
            "additionalProperties": Object {
              "format": "int32",
              "type": "integer",
            },
            "type": "object",
          },
        },
      },
      "security": Array [
        Object {
          "api_key": Array [],
        },
      ],
      "summary": "Returns pet inventories by status",
      "tags": Array [
        "store",
      ],
    },
    "id": "/store/inventory_get",
    "loadContent": [Function],
    "type": "oas2_operation",
  },
  Object {
    "content": Object {
      "200": Object {
        "description": "successful operation",
        "schema": Object {
          "additionalProperties": Object {
            "format": "int32",
            "type": "integer",
          },
          "type": "object",
        },
      },
    },
    "id": "/store/inventory_get_responses",
    "loadContent": [Function],
    "type": "oas2_responses",
  },
  Object {
    "content": Object {
      "description": "successful operation",
      "schema": Object {
        "additionalProperties": Object {
          "format": "int32",
          "type": "integer",
        },
        "type": "object",
      },
    },
    "id": "/store/inventory_get_responses_200",
    "loadContent": [Function],
    "type": "oas2_response",
  },
  Object {
    "content": Object {
      "deprecated": undefined,
      "description": "Returns a map of status codes to quantities",
      "id": "?http-operation-id?",
      "iid": "getInventory",
      "method": "get",
      "path": "/store/inventory",
      "request": Object {},
      "responses": Array [
        Object {
          "code": "200",
          "contents": Array [
            Object {
              "examples": Array [],
              "mediaType": "application/json",
              "schema": Object {
                "additionalProperties": Object {
                  "format": "int32",
                  "type": "integer",
                },
                "type": "object",
              },
            },
          ],
          "description": "successful operation",
          "headers": Array [],
        },
      ],
      "security": Array [],
      "servers": Array [],
      "summary": "Returns pet inventories by status",
      "tags": Array [
        Object {
          "name": "store",
        },
      ],
    },
    "id": "/store/inventory_get-oas2_http_operation",
    "loadContent": [Function],
    "type": "oas2_http_operation",
  },
  Object {
    "content": Object {
      "post": Object {
        "description": "",
        "operationId": "placeOrder",
        "parameters": Array [
          Object {
            "description": "order placed for purchasing the pet",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": Object {
              "$ref": "#/definitions/Order",
            },
          },
        ],
        "produces": Array [
          "application/xml",
          "application/json",
        ],
        "responses": Object {
          "200": Object {
            "description": "successful operation",
            "schema": Object {
              "$ref": "#/definitions/Order",
            },
          },
          "400": Object {
            "description": "Invalid Order",
          },
        },
        "summary": "Place an order for a pet",
        "tags": Array [
          "store",
        ],
      },
    },
    "id": "/store/order",
    "loadContent": [Function],
    "type": "oas2_path",
  },
  Object {
    "content": Object {
      "description": "",
      "operationId": "placeOrder",
      "parameters": Array [
        Object {
          "description": "order placed for purchasing the pet",
          "in": "body",
          "name": "body",
          "required": true,
          "schema": Object {
            "$ref": "#/definitions/Order",
          },
        },
      ],
      "produces": Array [
        "application/xml",
        "application/json",
      ],
      "responses": Object {
        "200": Object {
          "description": "successful operation",
          "schema": Object {
            "$ref": "#/definitions/Order",
          },
        },
        "400": Object {
          "description": "Invalid Order",
        },
      },
      "summary": "Place an order for a pet",
      "tags": Array [
        "store",
      ],
    },
    "id": "/store/order_post",
    "loadContent": [Function],
    "type": "oas2_operation",
  },
  Object {
    "content": Object {
      "description": "order placed for purchasing the pet",
      "in": "body",
      "name": "body",
      "required": true,
      "schema": Object {
        "$ref": "#/definitions/Order",
      },
    },
    "id": "/store/order_post_body",
    "loadContent": [Function],
    "type": "oas2_body",
  },
  Object {
    "content": Object {
      "200": Object {
        "description": "successful operation",
        "schema": Object {
          "$ref": "#/definitions/Order",
        },
      },
      "400": Object {
        "description": "Invalid Order",
      },
    },
    "id": "/store/order_post_responses",
    "loadContent": [Function],
    "type": "oas2_responses",
  },
  Object {
    "content": Object {
      "description": "successful operation",
      "schema": Object {
        "$ref": "#/definitions/Order",
      },
    },
    "id": "/store/order_post_responses_200",
    "loadContent": [Function],
    "type": "oas2_response",
  },
  Object {
    "content": Object {
      "description": "Invalid Order",
    },
    "id": "/store/order_post_responses_400",
    "loadContent": [Function],
    "type": "oas2_response",
  },
  Object {
    "content": Object {
      "deprecated": undefined,
      "description": "",
      "id": "?http-operation-id?",
      "iid": "placeOrder",
      "method": "post",
      "path": "/store/order",
      "request": Object {
        "body": Object {
          "contents": Array [
            Object {
              "mediaType": "*",
              "schema": Object {
                "$ref": "#/definitions/Order",
              },
            },
          ],
          "description": "order placed for purchasing the pet",
          "required": true,
        },
      },
      "responses": Array [
        Object {
          "code": "200",
          "contents": Array [
            Object {
              "examples": Array [],
              "mediaType": "application/xml",
              "schema": Object {
                "$ref": "#/definitions/Order",
              },
            },
            Object {
              "examples": Array [],
              "mediaType": "application/json",
              "schema": Object {
                "$ref": "#/definitions/Order",
              },
            },
          ],
          "description": "successful operation",
          "headers": Array [],
        },
        Object {
          "code": "400",
          "contents": Array [
            Object {
              "examples": Array [],
              "mediaType": "application/xml",
              "schema": undefined,
            },
            Object {
              "examples": Array [],
              "mediaType": "application/json",
              "schema": undefined,
            },
          ],
          "description": "Invalid Order",
          "headers": Array [],
        },
      ],
      "security": Array [],
      "servers": Array [],
      "summary": "Place an order for a pet",
      "tags": Array [
        Object {
          "name": "store",
        },
      ],
    },
    "id": "/store/order_post-oas2_http_operation",
    "loadContent": [Function],
    "type": "oas2_http_operation",
  },
  Object {
    "content": Object {
      "delete": Object {
        "description": "For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors",
        "operationId": "deleteOrder",
        "parameters": Array [
          Object {
            "description": "ID of the order that needs to be deleted",
            "format": "int64",
            "in": "path",
            "minimum": 1,
            "name": "orderId",
            "required": true,
            "type": "integer",
          },
        ],
        "produces": Array [
          "application/xml",
          "application/json",
        ],
        "responses": Object {
          "400": Object {
            "description": "Invalid ID supplied",
          },
          "404": Object {
            "description": "Order not found",
          },
        },
        "summary": "Delete purchase order by ID",
        "tags": Array [
          "store",
        ],
      },
      "get": Object {
        "description": "For valid response try integer IDs with value >= 1 and <= 10. Other values will generated exceptions",
        "operationId": "getOrderById",
        "parameters": Array [
          Object {
            "description": "ID of pet that needs to be fetched",
            "format": "int64",
            "in": "path",
            "maximum": 10,
            "minimum": 1,
            "name": "orderId",
            "required": true,
            "type": "integer",
          },
        ],
        "produces": Array [
          "application/xml",
          "application/json",
        ],
        "responses": Object {
          "200": Object {
            "description": "successful operation",
            "schema": Object {
              "$ref": "#/definitions/Order",
            },
          },
          "400": Object {
            "description": "Invalid ID supplied",
          },
          "404": Object {
            "description": "Order not found",
          },
        },
        "summary": "Find purchase order by ID",
        "tags": Array [
          "store",
        ],
      },
    },
    "id": "/store/order/{orderId}",
    "loadContent": [Function],
    "type": "oas2_path",
  },
  Object {
    "content": Object {
      "description": "For valid response try integer IDs with value >= 1 and <= 10. Other values will generated exceptions",
      "operationId": "getOrderById",
      "parameters": Array [
        Object {
          "description": "ID of pet that needs to be fetched",
          "format": "int64",
          "in": "path",
          "maximum": 10,
          "minimum": 1,
          "name": "orderId",
          "required": true,
          "type": "integer",
        },
      ],
      "produces": Array [
        "application/xml",
        "application/json",
      ],
      "responses": Object {
        "200": Object {
          "description": "successful operation",
          "schema": Object {
            "$ref": "#/definitions/Order",
          },
        },
        "400": Object {
          "description": "Invalid ID supplied",
        },
        "404": Object {
          "description": "Order not found",
        },
      },
      "summary": "Find purchase order by ID",
      "tags": Array [
        "store",
      ],
    },
    "id": "/store/order/{orderId}_get",
    "loadContent": [Function],
    "type": "oas2_operation",
  },
  Object {
    "content": Object {
      "description": "ID of pet that needs to be fetched",
      "format": "int64",
      "in": "path",
      "maximum": 10,
      "minimum": 1,
      "name": "orderId",
      "required": true,
      "type": "integer",
    },
    "id": "/store/order/{orderId}_get_orderId",
    "loadContent": [Function],
    "type": "oas2_path",
  },
  Object {
    "content": Object {
      "200": Object {
        "description": "successful operation",
        "schema": Object {
          "$ref": "#/definitions/Order",
        },
      },
      "400": Object {
        "description": "Invalid ID supplied",
      },
      "404": Object {
        "description": "Order not found",
      },
    },
    "id": "/store/order/{orderId}_get_responses",
    "loadContent": [Function],
    "type": "oas2_responses",
  },
  Object {
    "content": Object {
      "description": "successful operation",
      "schema": Object {
        "$ref": "#/definitions/Order",
      },
    },
    "id": "/store/order/{orderId}_get_responses_200",
    "loadContent": [Function],
    "type": "oas2_response",
  },
  Object {
    "content": Object {
      "description": "Invalid ID supplied",
    },
    "id": "/store/order/{orderId}_get_responses_400",
    "loadContent": [Function],
    "type": "oas2_response",
  },
  Object {
    "content": Object {
      "description": "Order not found",
    },
    "id": "/store/order/{orderId}_get_responses_404",
    "loadContent": [Function],
    "type": "oas2_response",
  },
  Object {
    "content": Object {
      "deprecated": undefined,
      "description": "For valid response try integer IDs with value >= 1 and <= 10. Other values will generated exceptions",
      "id": "?http-operation-id?",
      "iid": "getOrderById",
      "method": "get",
      "path": "/store/order/{orderId}",
      "request": Object {
        "path": Array [
          Object {
            "content": Object {
              "*": Object {
                "mediaType": "*",
                "schema": Object {
                  "description": "ID of pet that needs to be fetched",
                  "format": "int64",
                  "in": "path",
                  "maximum": 10,
                  "minimum": 1,
                  "name": "orderId",
                  "required": true,
                  "type": "integer",
                },
              },
            },
            "description": "ID of pet that needs to be fetched",
            "name": "orderId",
            "required": true,
            "style": "simple",
          },
        ],
      },
      "responses": Array [
        Object {
          "code": "200",
          "contents": Array [
            Object {
              "examples": Array [],
              "mediaType": "application/xml",
              "schema": Object {
                "$ref": "#/definitions/Order",
              },
            },
            Object {
              "examples": Array [],
              "mediaType": "application/json",
              "schema": Object {
                "$ref": "#/definitions/Order",
              },
            },
          ],
          "description": "successful operation",
          "headers": Array [],
        },
        Object {
          "code": "400",
          "contents": Array [
            Object {
              "examples": Array [],
              "mediaType": "application/xml",
              "schema": undefined,
            },
            Object {
              "examples": Array [],
              "mediaType": "application/json",
              "schema": undefined,
            },
          ],
          "description": "Invalid ID supplied",
          "headers": Array [],
        },
        Object {
          "code": "404",
          "contents": Array [
            Object {
              "examples": Array [],
              "mediaType": "application/xml",
              "schema": undefined,
            },
            Object {
              "examples": Array [],
              "mediaType": "application/json",
              "schema": undefined,
            },
          ],
          "description": "Order not found",
          "headers": Array [],
        },
      ],
      "security": Array [],
      "servers": Array [],
      "summary": "Find purchase order by ID",
      "tags": Array [
        Object {
          "name": "store",
        },
      ],
    },
    "id": "/store/order/{orderId}_get-oas2_http_operation",
    "loadContent": [Function],
    "type": "oas2_http_operation",
  },
  Object {
    "content": Object {
      "description": "For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors",
      "operationId": "deleteOrder",
      "parameters": Array [
        Object {
          "description": "ID of the order that needs to be deleted",
          "format": "int64",
          "in": "path",
          "minimum": 1,
          "name": "orderId",
          "required": true,
          "type": "integer",
        },
      ],
      "produces": Array [
        "application/xml",
        "application/json",
      ],
      "responses": Object {
        "400": Object {
          "description": "Invalid ID supplied",
        },
        "404": Object {
          "description": "Order not found",
        },
      },
      "summary": "Delete purchase order by ID",
      "tags": Array [
        "store",
      ],
    },
    "id": "/store/order/{orderId}_delete",
    "loadContent": [Function],
    "type": "oas2_operation",
  },
  Object {
    "content": Object {
      "description": "ID of the order that needs to be deleted",
      "format": "int64",
      "in": "path",
      "minimum": 1,
      "name": "orderId",
      "required": true,
      "type": "integer",
    },
    "id": "/store/order/{orderId}_delete_orderId",
    "loadContent": [Function],
    "type": "oas2_path",
  },
  Object {
    "content": Object {
      "400": Object {
        "description": "Invalid ID supplied",
      },
      "404": Object {
        "description": "Order not found",
      },
    },
    "id": "/store/order/{orderId}_delete_responses",
    "loadContent": [Function],
    "type": "oas2_responses",
  },
  Object {
    "content": Object {
      "description": "Invalid ID supplied",
    },
    "id": "/store/order/{orderId}_delete_responses_400",
    "loadContent": [Function],
    "type": "oas2_response",
  },
  Object {
    "content": Object {
      "description": "Order not found",
    },
    "id": "/store/order/{orderId}_delete_responses_404",
    "loadContent": [Function],
    "type": "oas2_response",
  },
  Object {
    "content": Object {
      "deprecated": undefined,
      "description": "For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors",
      "id": "?http-operation-id?",
      "iid": "deleteOrder",
      "method": "delete",
      "path": "/store/order/{orderId}",
      "request": Object {
        "path": Array [
          Object {
            "content": Object {
              "*": Object {
                "mediaType": "*",
                "schema": Object {
                  "description": "ID of the order that needs to be deleted",
                  "format": "int64",
                  "in": "path",
                  "minimum": 1,
                  "name": "orderId",
                  "required": true,
                  "type": "integer",
                },
              },
            },
            "description": "ID of the order that needs to be deleted",
            "name": "orderId",
            "required": true,
            "style": "simple",
          },
        ],
      },
      "responses": Array [
        Object {
          "code": "400",
          "contents": Array [
            Object {
              "examples": Array [],
              "mediaType": "application/xml",
              "schema": undefined,
            },
            Object {
              "examples": Array [],
              "mediaType": "application/json",
              "schema": undefined,
            },
          ],
          "description": "Invalid ID supplied",
          "headers": Array [],
        },
        Object {
          "code": "404",
          "contents": Array [
            Object {
              "examples": Array [],
              "mediaType": "application/xml",
              "schema": undefined,
            },
            Object {
              "examples": Array [],
              "mediaType": "application/json",
              "schema": undefined,
            },
          ],
          "description": "Order not found",
          "headers": Array [],
        },
      ],
      "security": Array [],
      "servers": Array [],
      "summary": "Delete purchase order by ID",
      "tags": Array [
        Object {
          "name": "store",
        },
      ],
    },
    "id": "/store/order/{orderId}_delete-oas2_http_operation",
    "loadContent": [Function],
    "type": "oas2_http_operation",
  },
  Object {
    "content": Object {
      "post": Object {
        "description": "This can only be done by the logged in user.",
        "operationId": "createUser",
        "parameters": Array [
          Object {
            "description": "Created user object",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": Object {
              "$ref": "#/definitions/User",
            },
          },
        ],
        "produces": Array [
          "application/xml",
          "application/json",
        ],
        "responses": Object {
          "default": Object {
            "description": "successful operation",
          },
        },
        "summary": "Create user",
        "tags": Array [
          "user",
        ],
      },
    },
    "id": "/user",
    "loadContent": [Function],
    "type": "oas2_path",
  },
  Object {
    "content": Object {
      "description": "This can only be done by the logged in user.",
      "operationId": "createUser",
      "parameters": Array [
        Object {
          "description": "Created user object",
          "in": "body",
          "name": "body",
          "required": true,
          "schema": Object {
            "$ref": "#/definitions/User",
          },
        },
      ],
      "produces": Array [
        "application/xml",
        "application/json",
      ],
      "responses": Object {
        "default": Object {
          "description": "successful operation",
        },
      },
      "summary": "Create user",
      "tags": Array [
        "user",
      ],
    },
    "id": "/user_post",
    "loadContent": [Function],
    "type": "oas2_operation",
  },
  Object {
    "content": Object {
      "description": "Created user object",
      "in": "body",
      "name": "body",
      "required": true,
      "schema": Object {
        "$ref": "#/definitions/User",
      },
    },
    "id": "/user_post_body",
    "loadContent": [Function],
    "type": "oas2_body",
  },
  Object {
    "content": Object {
      "default": Object {
        "description": "successful operation",
      },
    },
    "id": "/user_post_responses",
    "loadContent": [Function],
    "type": "oas2_responses",
  },
  Object {
    "content": Object {
      "description": "successful operation",
    },
    "id": "/user_post_responses_default",
    "loadContent": [Function],
    "type": "oas2_response",
  },
  Object {
    "content": Object {
      "deprecated": undefined,
      "description": "This can only be done by the logged in user.",
      "id": "?http-operation-id?",
      "iid": "createUser",
      "method": "post",
      "path": "/user",
      "request": Object {
        "body": Object {
          "contents": Array [
            Object {
              "mediaType": "*",
              "schema": Object {
                "$ref": "#/definitions/User",
              },
            },
          ],
          "description": "Created user object",
          "required": true,
        },
      },
      "responses": Array [
        Object {
          "code": "default",
          "contents": Array [
            Object {
              "examples": Array [],
              "mediaType": "application/xml",
              "schema": undefined,
            },
            Object {
              "examples": Array [],
              "mediaType": "application/json",
              "schema": undefined,
            },
          ],
          "description": "successful operation",
          "headers": Array [],
        },
      ],
      "security": Array [],
      "servers": Array [],
      "summary": "Create user",
      "tags": Array [
        Object {
          "name": "user",
        },
      ],
    },
    "id": "/user_post-oas2_http_operation",
    "loadContent": [Function],
    "type": "oas2_http_operation",
  },
  Object {
    "content": Object {
      "post": Object {
        "description": "",
        "operationId": "createUsersWithArrayInput",
        "parameters": Array [
          Object {
            "description": "List of user object",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": Object {
              "items": Object {
                "$ref": "#/definitions/User",
              },
              "type": "array",
            },
          },
        ],
        "produces": Array [
          "application/xml",
          "application/json",
        ],
        "responses": Object {
          "default": Object {
            "description": "successful operation",
          },
        },
        "summary": "Creates list of users with given input array",
        "tags": Array [
          "user",
        ],
      },
    },
    "id": "/user/createWithArray",
    "loadContent": [Function],
    "type": "oas2_path",
  },
  Object {
    "content": Object {
      "description": "",
      "operationId": "createUsersWithArrayInput",
      "parameters": Array [
        Object {
          "description": "List of user object",
          "in": "body",
          "name": "body",
          "required": true,
          "schema": Object {
            "items": Object {
              "$ref": "#/definitions/User",
            },
            "type": "array",
          },
        },
      ],
      "produces": Array [
        "application/xml",
        "application/json",
      ],
      "responses": Object {
        "default": Object {
          "description": "successful operation",
        },
      },
      "summary": "Creates list of users with given input array",
      "tags": Array [
        "user",
      ],
    },
    "id": "/user/createWithArray_post",
    "loadContent": [Function],
    "type": "oas2_operation",
  },
  Object {
    "content": Object {
      "description": "List of user object",
      "in": "body",
      "name": "body",
      "required": true,
      "schema": Object {
        "items": Object {
          "$ref": "#/definitions/User",
        },
        "type": "array",
      },
    },
    "id": "/user/createWithArray_post_body",
    "loadContent": [Function],
    "type": "oas2_body",
  },
  Object {
    "content": Object {
      "default": Object {
        "description": "successful operation",
      },
    },
    "id": "/user/createWithArray_post_responses",
    "loadContent": [Function],
    "type": "oas2_responses",
  },
  Object {
    "content": Object {
      "description": "successful operation",
    },
    "id": "/user/createWithArray_post_responses_default",
    "loadContent": [Function],
    "type": "oas2_response",
  },
  Object {
    "content": Object {
      "deprecated": undefined,
      "description": "",
      "id": "?http-operation-id?",
      "iid": "createUsersWithArrayInput",
      "method": "post",
      "path": "/user/createWithArray",
      "request": Object {
        "body": Object {
          "contents": Array [
            Object {
              "mediaType": "*",
              "schema": Object {
                "items": Object {
                  "$ref": "#/definitions/User",
                },
                "type": "array",
              },
            },
          ],
          "description": "List of user object",
          "required": true,
        },
      },
      "responses": Array [
        Object {
          "code": "default",
          "contents": Array [
            Object {
              "examples": Array [],
              "mediaType": "application/xml",
              "schema": undefined,
            },
            Object {
              "examples": Array [],
              "mediaType": "application/json",
              "schema": undefined,
            },
          ],
          "description": "successful operation",
          "headers": Array [],
        },
      ],
      "security": Array [],
      "servers": Array [],
      "summary": "Creates list of users with given input array",
      "tags": Array [
        Object {
          "name": "user",
        },
      ],
    },
    "id": "/user/createWithArray_post-oas2_http_operation",
    "loadContent": [Function],
    "type": "oas2_http_operation",
  },
  Object {
    "content": Object {
      "post": Object {
        "description": "",
        "operationId": "createUsersWithListInput",
        "parameters": Array [
          Object {
            "description": "List of user object",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": Object {
              "items": Object {
                "$ref": "#/definitions/User",
              },
              "type": "array",
            },
          },
        ],
        "produces": Array [
          "application/xml",
          "application/json",
        ],
        "responses": Object {
          "default": Object {
            "description": "successful operation",
          },
        },
        "summary": "Creates list of users with given input array",
        "tags": Array [
          "user",
        ],
      },
    },
    "id": "/user/createWithList",
    "loadContent": [Function],
    "type": "oas2_path",
  },
  Object {
    "content": Object {
      "description": "",
      "operationId": "createUsersWithListInput",
      "parameters": Array [
        Object {
          "description": "List of user object",
          "in": "body",
          "name": "body",
          "required": true,
          "schema": Object {
            "items": Object {
              "$ref": "#/definitions/User",
            },
            "type": "array",
          },
        },
      ],
      "produces": Array [
        "application/xml",
        "application/json",
      ],
      "responses": Object {
        "default": Object {
          "description": "successful operation",
        },
      },
      "summary": "Creates list of users with given input array",
      "tags": Array [
        "user",
      ],
    },
    "id": "/user/createWithList_post",
    "loadContent": [Function],
    "type": "oas2_operation",
  },
  Object {
    "content": Object {
      "description": "List of user object",
      "in": "body",
      "name": "body",
      "required": true,
      "schema": Object {
        "items": Object {
          "$ref": "#/definitions/User",
        },
        "type": "array",
      },
    },
    "id": "/user/createWithList_post_body",
    "loadContent": [Function],
    "type": "oas2_body",
  },
  Object {
    "content": Object {
      "default": Object {
        "description": "successful operation",
      },
    },
    "id": "/user/createWithList_post_responses",
    "loadContent": [Function],
    "type": "oas2_responses",
  },
  Object {
    "content": Object {
      "description": "successful operation",
    },
    "id": "/user/createWithList_post_responses_default",
    "loadContent": [Function],
    "type": "oas2_response",
  },
  Object {
    "content": Object {
      "deprecated": undefined,
      "description": "",
      "id": "?http-operation-id?",
      "iid": "createUsersWithListInput",
      "method": "post",
      "path": "/user/createWithList",
      "request": Object {
        "body": Object {
          "contents": Array [
            Object {
              "mediaType": "*",
              "schema": Object {
                "items": Object {
                  "$ref": "#/definitions/User",
                },
                "type": "array",
              },
            },
          ],
          "description": "List of user object",
          "required": true,
        },
      },
      "responses": Array [
        Object {
          "code": "default",
          "contents": Array [
            Object {
              "examples": Array [],
              "mediaType": "application/xml",
              "schema": undefined,
            },
            Object {
              "examples": Array [],
              "mediaType": "application/json",
              "schema": undefined,
            },
          ],
          "description": "successful operation",
          "headers": Array [],
        },
      ],
      "security": Array [],
      "servers": Array [],
      "summary": "Creates list of users with given input array",
      "tags": Array [
        Object {
          "name": "user",
        },
      ],
    },
    "id": "/user/createWithList_post-oas2_http_operation",
    "loadContent": [Function],
    "type": "oas2_http_operation",
  },
  Object {
    "content": Object {
      "get": Object {
        "description": "",
        "operationId": "loginUser",
        "parameters": Array [
          Object {
            "description": "The user name for login",
            "in": "query",
            "name": "username",
            "required": true,
            "type": "string",
          },
          Object {
            "description": "The password for login in clear text",
            "in": "query",
            "name": "password",
            "required": true,
            "type": "string",
          },
        ],
        "produces": Array [
          "application/xml",
          "application/json",
        ],
        "responses": Object {
          "200": Object {
            "description": "successful operation",
            "headers": Object {
              "X-Expires-After": Object {
                "description": "date in UTC when token expires",
                "format": "date-time",
                "type": "string",
              },
              "X-Rate-Limit": Object {
                "description": "calls per hour allowed by the user",
                "format": "int32",
                "type": "integer",
              },
            },
            "schema": Object {
              "type": "string",
            },
          },
          "400": Object {
            "description": "Invalid username/password supplied",
          },
        },
        "summary": "Logs user into the system",
        "tags": Array [
          "user",
        ],
      },
    },
    "id": "/user/login",
    "loadContent": [Function],
    "type": "oas2_path",
  },
  Object {
    "content": Object {
      "description": "",
      "operationId": "loginUser",
      "parameters": Array [
        Object {
          "description": "The user name for login",
          "in": "query",
          "name": "username",
          "required": true,
          "type": "string",
        },
        Object {
          "description": "The password for login in clear text",
          "in": "query",
          "name": "password",
          "required": true,
          "type": "string",
        },
      ],
      "produces": Array [
        "application/xml",
        "application/json",
      ],
      "responses": Object {
        "200": Object {
          "description": "successful operation",
          "headers": Object {
            "X-Expires-After": Object {
              "description": "date in UTC when token expires",
              "format": "date-time",
              "type": "string",
            },
            "X-Rate-Limit": Object {
              "description": "calls per hour allowed by the user",
              "format": "int32",
              "type": "integer",
            },
          },
          "schema": Object {
            "type": "string",
          },
        },
        "400": Object {
          "description": "Invalid username/password supplied",
        },
      },
      "summary": "Logs user into the system",
      "tags": Array [
        "user",
      ],
    },
    "id": "/user/login_get",
    "loadContent": [Function],
    "type": "oas2_operation",
  },
  Object {
    "content": Object {
      "description": "The user name for login",
      "in": "query",
      "name": "username",
      "required": true,
      "type": "string",
    },
    "id": "/user/login_get_username",
    "loadContent": [Function],
    "type": "oas2_query",
  },
  Object {
    "content": Object {
      "description": "The password for login in clear text",
      "in": "query",
      "name": "password",
      "required": true,
      "type": "string",
    },
    "id": "/user/login_get_password",
    "loadContent": [Function],
    "type": "oas2_query",
  },
  Object {
    "content": Object {
      "200": Object {
        "description": "successful operation",
        "headers": Object {
          "X-Expires-After": Object {
            "description": "date in UTC when token expires",
            "format": "date-time",
            "type": "string",
          },
          "X-Rate-Limit": Object {
            "description": "calls per hour allowed by the user",
            "format": "int32",
            "type": "integer",
          },
        },
        "schema": Object {
          "type": "string",
        },
      },
      "400": Object {
        "description": "Invalid username/password supplied",
      },
    },
    "id": "/user/login_get_responses",
    "loadContent": [Function],
    "type": "oas2_responses",
  },
  Object {
    "content": Object {
      "description": "successful operation",
      "headers": Object {
        "X-Expires-After": Object {
          "description": "date in UTC when token expires",
          "format": "date-time",
          "type": "string",
        },
        "X-Rate-Limit": Object {
          "description": "calls per hour allowed by the user",
          "format": "int32",
          "type": "integer",
        },
      },
      "schema": Object {
        "type": "string",
      },
    },
    "id": "/user/login_get_responses_200",
    "loadContent": [Function],
    "type": "oas2_response",
  },
  Object {
    "content": Object {
      "description": "Invalid username/password supplied",
    },
    "id": "/user/login_get_responses_400",
    "loadContent": [Function],
    "type": "oas2_response",
  },
  Object {
    "content": Object {
      "deprecated": undefined,
      "description": "",
      "id": "?http-operation-id?",
      "iid": "loginUser",
      "method": "get",
      "path": "/user/login",
      "request": Object {
        "query": Array [
          Object {
            "allowEmptyValue": undefined,
            "content": Object {
              "*": Object {
                "mediaType": "*",
                "schema": Object {
                  "description": "The user name for login",
                  "in": "query",
                  "name": "username",
                  "required": true,
                  "type": "string",
                },
              },
            },
            "description": "The user name for login",
            "name": "username",
            "required": true,
            "style": "form",
          },
          Object {
            "allowEmptyValue": undefined,
            "content": Object {
              "*": Object {
                "mediaType": "*",
                "schema": Object {
                  "description": "The password for login in clear text",
                  "in": "query",
                  "name": "password",
                  "required": true,
                  "type": "string",
                },
              },
            },
            "description": "The password for login in clear text",
            "name": "password",
            "required": true,
            "style": "form",
          },
        ],
      },
      "responses": Array [
        Object {
          "code": "200",
          "contents": Array [
            Object {
              "examples": Array [],
              "mediaType": "application/xml",
              "schema": Object {
                "type": "string",
              },
            },
            Object {
              "examples": Array [],
              "mediaType": "application/json",
              "schema": Object {
                "type": "string",
              },
            },
          ],
          "description": "successful operation",
          "headers": Array [
            Object {
              "content": Object {
                "application/json": Object {
                  "mediaType": "application/json",
                  "schema": Object {
                    "description": "calls per hour allowed by the user",
                    "format": "int32",
                    "type": "integer",
                  },
                },
                "application/xml": Object {
                  "mediaType": "application/xml",
                  "schema": Object {
                    "description": "calls per hour allowed by the user",
                    "format": "int32",
                    "type": "integer",
                  },
                },
              },
              "description": "calls per hour allowed by the user",
              "name": "X-Rate-Limit",
              "style": "simple",
            },
            Object {
              "content": Object {
                "application/json": Object {
                  "mediaType": "application/json",
                  "schema": Object {
                    "description": "date in UTC when token expires",
                    "format": "date-time",
                    "type": "string",
                  },
                },
                "application/xml": Object {
                  "mediaType": "application/xml",
                  "schema": Object {
                    "description": "date in UTC when token expires",
                    "format": "date-time",
                    "type": "string",
                  },
                },
              },
              "description": "date in UTC when token expires",
              "name": "X-Expires-After",
              "style": "simple",
            },
          ],
        },
        Object {
          "code": "400",
          "contents": Array [
            Object {
              "examples": Array [],
              "mediaType": "application/xml",
              "schema": undefined,
            },
            Object {
              "examples": Array [],
              "mediaType": "application/json",
              "schema": undefined,
            },
          ],
          "description": "Invalid username/password supplied",
          "headers": Array [],
        },
      ],
      "security": Array [],
      "servers": Array [],
      "summary": "Logs user into the system",
      "tags": Array [
        Object {
          "name": "user",
        },
      ],
    },
    "id": "/user/login_get-oas2_http_operation",
    "loadContent": [Function],
    "type": "oas2_http_operation",
  },
  Object {
    "content": Object {
      "get": Object {
        "description": "",
        "operationId": "logoutUser",
        "parameters": Array [],
        "produces": Array [
          "application/xml",
          "application/json",
        ],
        "responses": Object {
          "default": Object {
            "description": "successful operation",
          },
        },
        "summary": "Logs out current logged in user session",
        "tags": Array [
          "user",
        ],
      },
    },
    "id": "/user/logout",
    "loadContent": [Function],
    "type": "oas2_path",
  },
  Object {
    "content": Object {
      "description": "",
      "operationId": "logoutUser",
      "parameters": Array [],
      "produces": Array [
        "application/xml",
        "application/json",
      ],
      "responses": Object {
        "default": Object {
          "description": "successful operation",
        },
      },
      "summary": "Logs out current logged in user session",
      "tags": Array [
        "user",
      ],
    },
    "id": "/user/logout_get",
    "loadContent": [Function],
    "type": "oas2_operation",
  },
  Object {
    "content": Object {
      "default": Object {
        "description": "successful operation",
      },
    },
    "id": "/user/logout_get_responses",
    "loadContent": [Function],
    "type": "oas2_responses",
  },
  Object {
    "content": Object {
      "description": "successful operation",
    },
    "id": "/user/logout_get_responses_default",
    "loadContent": [Function],
    "type": "oas2_response",
  },
  Object {
    "content": Object {
      "deprecated": undefined,
      "description": "",
      "id": "?http-operation-id?",
      "iid": "logoutUser",
      "method": "get",
      "path": "/user/logout",
      "request": Object {},
      "responses": Array [
        Object {
          "code": "default",
          "contents": Array [
            Object {
              "examples": Array [],
              "mediaType": "application/xml",
              "schema": undefined,
            },
            Object {
              "examples": Array [],
              "mediaType": "application/json",
              "schema": undefined,
            },
          ],
          "description": "successful operation",
          "headers": Array [],
        },
      ],
      "security": Array [],
      "servers": Array [],
      "summary": "Logs out current logged in user session",
      "tags": Array [
        Object {
          "name": "user",
        },
      ],
    },
    "id": "/user/logout_get-oas2_http_operation",
    "loadContent": [Function],
    "type": "oas2_http_operation",
  },
  Object {
    "content": Object {
      "delete": Object {
        "description": "This can only be done by the logged in user.",
        "operationId": "deleteUser",
        "parameters": Array [
          Object {
            "description": "The name that needs to be deleted",
            "in": "path",
            "name": "username",
            "required": true,
            "type": "string",
          },
        ],
        "produces": Array [
          "application/xml",
          "application/json",
        ],
        "responses": Object {
          "400": Object {
            "description": "Invalid username supplied",
          },
          "404": Object {
            "description": "User not found",
          },
        },
        "summary": "Delete user",
        "tags": Array [
          "user",
        ],
      },
      "get": Object {
        "description": "",
        "operationId": "getUserByName",
        "parameters": Array [
          Object {
            "description": "The name that needs to be fetched. Use user1 for testing. ",
            "in": "path",
            "name": "username",
            "required": true,
            "type": "string",
          },
        ],
        "produces": Array [
          "application/xml",
          "application/json",
        ],
        "responses": Object {
          "200": Object {
            "description": "successful operation",
            "schema": Object {
              "$ref": "#/definitions/User",
            },
          },
          "400": Object {
            "description": "Invalid username supplied",
          },
          "404": Object {
            "description": "User not found",
          },
        },
        "summary": "Get user by user name",
        "tags": Array [
          "user",
        ],
      },
      "put": Object {
        "description": "This can only be done by the logged in user.",
        "operationId": "updateUser",
        "parameters": Array [
          Object {
            "description": "name that need to be updated",
            "in": "path",
            "name": "username",
            "required": true,
            "type": "string",
          },
          Object {
            "description": "Updated user object",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": Object {
              "$ref": "#/definitions/User",
            },
          },
        ],
        "produces": Array [
          "application/xml",
          "application/json",
        ],
        "responses": Object {
          "400": Object {
            "description": "Invalid user supplied",
          },
          "404": Object {
            "description": "User not found",
          },
        },
        "summary": "Updated user",
        "tags": Array [
          "user",
        ],
      },
    },
    "id": "/user/{username}",
    "loadContent": [Function],
    "type": "oas2_path",
  },
  Object {
    "content": Object {
      "description": "",
      "operationId": "getUserByName",
      "parameters": Array [
        Object {
          "description": "The name that needs to be fetched. Use user1 for testing. ",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string",
        },
      ],
      "produces": Array [
        "application/xml",
        "application/json",
      ],
      "responses": Object {
        "200": Object {
          "description": "successful operation",
          "schema": Object {
            "$ref": "#/definitions/User",
          },
        },
        "400": Object {
          "description": "Invalid username supplied",
        },
        "404": Object {
          "description": "User not found",
        },
      },
      "summary": "Get user by user name",
      "tags": Array [
        "user",
      ],
    },
    "id": "/user/{username}_get",
    "loadContent": [Function],
    "type": "oas2_operation",
  },
  Object {
    "content": Object {
      "description": "The name that needs to be fetched. Use user1 for testing. ",
      "in": "path",
      "name": "username",
      "required": true,
      "type": "string",
    },
    "id": "/user/{username}_get_username",
    "loadContent": [Function],
    "type": "oas2_path",
  },
  Object {
    "content": Object {
      "200": Object {
        "description": "successful operation",
        "schema": Object {
          "$ref": "#/definitions/User",
        },
      },
      "400": Object {
        "description": "Invalid username supplied",
      },
      "404": Object {
        "description": "User not found",
      },
    },
    "id": "/user/{username}_get_responses",
    "loadContent": [Function],
    "type": "oas2_responses",
  },
  Object {
    "content": Object {
      "description": "successful operation",
      "schema": Object {
        "$ref": "#/definitions/User",
      },
    },
    "id": "/user/{username}_get_responses_200",
    "loadContent": [Function],
    "type": "oas2_response",
  },
  Object {
    "content": Object {
      "description": "Invalid username supplied",
    },
    "id": "/user/{username}_get_responses_400",
    "loadContent": [Function],
    "type": "oas2_response",
  },
  Object {
    "content": Object {
      "description": "User not found",
    },
    "id": "/user/{username}_get_responses_404",
    "loadContent": [Function],
    "type": "oas2_response",
  },
  Object {
    "content": Object {
      "deprecated": undefined,
      "description": "",
      "id": "?http-operation-id?",
      "iid": "getUserByName",
      "method": "get",
      "path": "/user/{username}",
      "request": Object {
        "path": Array [
          Object {
            "content": Object {
              "*": Object {
                "mediaType": "*",
                "schema": Object {
                  "description": "The name that needs to be fetched. Use user1 for testing. ",
                  "in": "path",
                  "name": "username",
                  "required": true,
                  "type": "string",
                },
              },
            },
            "description": "The name that needs to be fetched. Use user1 for testing. ",
            "name": "username",
            "required": true,
            "style": "simple",
          },
        ],
      },
      "responses": Array [
        Object {
          "code": "200",
          "contents": Array [
            Object {
              "examples": Array [],
              "mediaType": "application/xml",
              "schema": Object {
                "$ref": "#/definitions/User",
              },
            },
            Object {
              "examples": Array [],
              "mediaType": "application/json",
              "schema": Object {
                "$ref": "#/definitions/User",
              },
            },
          ],
          "description": "successful operation",
          "headers": Array [],
        },
        Object {
          "code": "400",
          "contents": Array [
            Object {
              "examples": Array [],
              "mediaType": "application/xml",
              "schema": undefined,
            },
            Object {
              "examples": Array [],
              "mediaType": "application/json",
              "schema": undefined,
            },
          ],
          "description": "Invalid username supplied",
          "headers": Array [],
        },
        Object {
          "code": "404",
          "contents": Array [
            Object {
              "examples": Array [],
              "mediaType": "application/xml",
              "schema": undefined,
            },
            Object {
              "examples": Array [],
              "mediaType": "application/json",
              "schema": undefined,
            },
          ],
          "description": "User not found",
          "headers": Array [],
        },
      ],
      "security": Array [],
      "servers": Array [],
      "summary": "Get user by user name",
      "tags": Array [
        Object {
          "name": "user",
        },
      ],
    },
    "id": "/user/{username}_get-oas2_http_operation",
    "loadContent": [Function],
    "type": "oas2_http_operation",
  },
  Object {
    "content": Object {
      "description": "This can only be done by the logged in user.",
      "operationId": "updateUser",
      "parameters": Array [
        Object {
          "description": "name that need to be updated",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string",
        },
        Object {
          "description": "Updated user object",
          "in": "body",
          "name": "body",
          "required": true,
          "schema": Object {
            "$ref": "#/definitions/User",
          },
        },
      ],
      "produces": Array [
        "application/xml",
        "application/json",
      ],
      "responses": Object {
        "400": Object {
          "description": "Invalid user supplied",
        },
        "404": Object {
          "description": "User not found",
        },
      },
      "summary": "Updated user",
      "tags": Array [
        "user",
      ],
    },
    "id": "/user/{username}_put",
    "loadContent": [Function],
    "type": "oas2_operation",
  },
  Object {
    "content": Object {
      "description": "Updated user object",
      "in": "body",
      "name": "body",
      "required": true,
      "schema": Object {
        "$ref": "#/definitions/User",
      },
    },
    "id": "/user/{username}_put_body",
    "loadContent": [Function],
    "type": "oas2_body",
  },
  Object {
    "content": Object {
      "description": "name that need to be updated",
      "in": "path",
      "name": "username",
      "required": true,
      "type": "string",
    },
    "id": "/user/{username}_put_username",
    "loadContent": [Function],
    "type": "oas2_path",
  },
  Object {
    "content": Object {
      "400": Object {
        "description": "Invalid user supplied",
      },
      "404": Object {
        "description": "User not found",
      },
    },
    "id": "/user/{username}_put_responses",
    "loadContent": [Function],
    "type": "oas2_responses",
  },
  Object {
    "content": Object {
      "description": "Invalid user supplied",
    },
    "id": "/user/{username}_put_responses_400",
    "loadContent": [Function],
    "type": "oas2_response",
  },
  Object {
    "content": Object {
      "description": "User not found",
    },
    "id": "/user/{username}_put_responses_404",
    "loadContent": [Function],
    "type": "oas2_response",
  },
  Object {
    "content": Object {
      "deprecated": undefined,
      "description": "This can only be done by the logged in user.",
      "id": "?http-operation-id?",
      "iid": "updateUser",
      "method": "put",
      "path": "/user/{username}",
      "request": Object {
        "body": Object {
          "contents": Array [
            Object {
              "mediaType": "*",
              "schema": Object {
                "$ref": "#/definitions/User",
              },
            },
          ],
          "description": "Updated user object",
          "required": true,
        },
        "path": Array [
          Object {
            "content": Object {
              "*": Object {
                "mediaType": "*",
                "schema": Object {
                  "description": "name that need to be updated",
                  "in": "path",
                  "name": "username",
                  "required": true,
                  "type": "string",
                },
              },
            },
            "description": "name that need to be updated",
            "name": "username",
            "required": true,
            "style": "simple",
          },
        ],
      },
      "responses": Array [
        Object {
          "code": "400",
          "contents": Array [
            Object {
              "examples": Array [],
              "mediaType": "application/xml",
              "schema": undefined,
            },
            Object {
              "examples": Array [],
              "mediaType": "application/json",
              "schema": undefined,
            },
          ],
          "description": "Invalid user supplied",
          "headers": Array [],
        },
        Object {
          "code": "404",
          "contents": Array [
            Object {
              "examples": Array [],
              "mediaType": "application/xml",
              "schema": undefined,
            },
            Object {
              "examples": Array [],
              "mediaType": "application/json",
              "schema": undefined,
            },
          ],
          "description": "User not found",
          "headers": Array [],
        },
      ],
      "security": Array [],
      "servers": Array [],
      "summary": "Updated user",
      "tags": Array [
        Object {
          "name": "user",
        },
      ],
    },
    "id": "/user/{username}_put-oas2_http_operation",
    "loadContent": [Function],
    "type": "oas2_http_operation",
  },
  Object {
    "content": Object {
      "description": "This can only be done by the logged in user.",
      "operationId": "deleteUser",
      "parameters": Array [
        Object {
          "description": "The name that needs to be deleted",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string",
        },
      ],
      "produces": Array [
        "application/xml",
        "application/json",
      ],
      "responses": Object {
        "400": Object {
          "description": "Invalid username supplied",
        },
        "404": Object {
          "description": "User not found",
        },
      },
      "summary": "Delete user",
      "tags": Array [
        "user",
      ],
    },
    "id": "/user/{username}_delete",
    "loadContent": [Function],
    "type": "oas2_operation",
  },
  Object {
    "content": Object {
      "description": "The name that needs to be deleted",
      "in": "path",
      "name": "username",
      "required": true,
      "type": "string",
    },
    "id": "/user/{username}_delete_username",
    "loadContent": [Function],
    "type": "oas2_path",
  },
  Object {
    "content": Object {
      "400": Object {
        "description": "Invalid username supplied",
      },
      "404": Object {
        "description": "User not found",
      },
    },
    "id": "/user/{username}_delete_responses",
    "loadContent": [Function],
    "type": "oas2_responses",
  },
  Object {
    "content": Object {
      "description": "Invalid username supplied",
    },
    "id": "/user/{username}_delete_responses_400",
    "loadContent": [Function],
    "type": "oas2_response",
  },
  Object {
    "content": Object {
      "description": "User not found",
    },
    "id": "/user/{username}_delete_responses_404",
    "loadContent": [Function],
    "type": "oas2_response",
  },
  Object {
    "content": Object {
      "deprecated": undefined,
      "description": "This can only be done by the logged in user.",
      "id": "?http-operation-id?",
      "iid": "deleteUser",
      "method": "delete",
      "path": "/user/{username}",
      "request": Object {
        "path": Array [
          Object {
            "content": Object {
              "*": Object {
                "mediaType": "*",
                "schema": Object {
                  "description": "The name that needs to be deleted",
                  "in": "path",
                  "name": "username",
                  "required": true,
                  "type": "string",
                },
              },
            },
            "description": "The name that needs to be deleted",
            "name": "username",
            "required": true,
            "style": "simple",
          },
        ],
      },
      "responses": Array [
        Object {
          "code": "400",
          "contents": Array [
            Object {
              "examples": Array [],
              "mediaType": "application/xml",
              "schema": undefined,
            },
            Object {
              "examples": Array [],
              "mediaType": "application/json",
              "schema": undefined,
            },
          ],
          "description": "Invalid username supplied",
          "headers": Array [],
        },
        Object {
          "code": "404",
          "contents": Array [
            Object {
              "examples": Array [],
              "mediaType": "application/xml",
              "schema": undefined,
            },
            Object {
              "examples": Array [],
              "mediaType": "application/json",
              "schema": undefined,
            },
          ],
          "description": "User not found",
          "headers": Array [],
        },
      ],
      "security": Array [],
      "servers": Array [],
      "summary": "Delete user",
      "tags": Array [
        Object {
          "name": "user",
        },
      ],
    },
    "id": "/user/{username}_delete-oas2_http_operation",
    "loadContent": [Function],
    "type": "oas2_http_operation",
  },
  Object {
    "content": Object {
      "properties": Object {
        "complete": Object {
          "default": false,
          "type": "boolean",
        },
        "id": Object {
          "format": "int64",
          "type": "integer",
        },
        "petId": Object {
          "format": "int64",
          "type": "integer",
        },
        "quantity": Object {
          "format": "int32",
          "type": "integer",
        },
        "shipDate": Object {
          "format": "date-time",
          "type": "string",
        },
        "status": Object {
          "description": "Order Status",
          "enum": Array [
            "placed",
            "approved",
            "delivered",
          ],
          "type": "string",
        },
      },
      "type": "object",
      "xml": Object {
        "name": "Order",
      },
    },
    "id": "definitions_Order",
    "loadContent": [Function],
    "type": "json_schema",
  },
  Object {
    "content": Object {
      "properties": Object {
        "email": Object {
          "type": "string",
        },
        "firstName": Object {
          "type": "string",
        },
        "id": Object {
          "format": "int64",
          "type": "integer",
        },
        "lastName": Object {
          "type": "string",
        },
        "password": Object {
          "type": "string",
        },
        "phone": Object {
          "type": "string",
        },
        "userStatus": Object {
          "description": "User Status",
          "format": "int32",
          "type": "integer",
        },
        "username": Object {
          "type": "string",
        },
      },
      "type": "object",
      "xml": Object {
        "name": "User",
      },
    },
    "id": "definitions_User",
    "loadContent": [Function],
    "type": "json_schema",
  },
  Object {
    "content": Object {
      "properties": Object {
        "id": Object {
          "format": "int64",
          "type": "integer",
        },
        "name": Object {
          "type": "string",
        },
      },
      "type": "object",
      "xml": Object {
        "name": "Category",
      },
    },
    "id": "definitions_Category",
    "loadContent": [Function],
    "type": "json_schema",
  },
  Object {
    "content": Object {
      "properties": Object {
        "id": Object {
          "format": "int64",
          "type": "integer",
        },
        "name": Object {
          "type": "string",
        },
      },
      "type": "object",
      "xml": Object {
        "name": "Tag",
      },
    },
    "id": "definitions_Tag",
    "loadContent": [Function],
    "type": "json_schema",
  },
  Object {
    "content": Object {
      "properties": Object {
        "code": Object {
          "format": "int32",
          "type": "integer",
        },
        "message": Object {
          "type": "string",
        },
        "type": Object {
          "type": "string",
        },
      },
      "type": "object",
    },
    "id": "definitions_ApiResponse",
    "loadContent": [Function],
    "type": "json_schema",
  },
  Object {
    "content": Object {
      "properties": Object {
        "category": Object {
          "$ref": "#/definitions/Category",
        },
        "id": Object {
          "format": "int64",
          "type": "integer",
        },
        "name": Object {
          "example": "doggie",
          "type": "string",
        },
        "photoUrls": Object {
          "items": Object {
            "type": "string",
          },
          "type": "array",
          "xml": Object {
            "name": "photoUrl",
            "wrapped": true,
          },
        },
        "status": Object {
          "description": "pet status in the store",
          "enum": Array [
            "available",
            "pending",
            "sold",
          ],
          "type": "string",
        },
        "tags": Object {
          "items": Object {
            "$ref": "#/definitions/Tag",
          },
          "type": "array",
          "xml": Object {
            "name": "tag",
            "wrapped": true,
          },
        },
      },
      "required": Array [
        "name",
        "photoUrls",
      ],
      "type": "object",
      "xml": Object {
        "name": "Pet",
      },
    },
    "id": "definitions_Pet",
    "loadContent": [Function],
    "type": "json_schema",
  },
]
`;

exports[`oas2 plugin complete document snapshot: nodes 2`] = `
Array [
  Object {
    "v": "/pet_put",
    "w": "pet",
  },
  Object {
    "v": "/pet",
    "w": "petstore_auth",
  },
  Object {
    "v": "/pet_post",
    "w": "pet",
  },
  Object {
    "v": "/pet/findByStatus_get",
    "w": "pet",
  },
  Object {
    "v": "/pet/findByStatus",
    "w": "petstore_auth",
  },
  Object {
    "v": "/pet/findByTags_get",
    "w": "pet",
  },
  Object {
    "v": "/pet/findByTags",
    "w": "petstore_auth",
  },
  Object {
    "v": "/pet/{petId}_get",
    "w": "pet",
  },
  Object {
    "v": "/pet/{petId}",
    "w": "api_key",
  },
  Object {
    "v": "/pet/{petId}_post",
    "w": "pet",
  },
  Object {
    "v": "/pet/{petId}",
    "w": "petstore_auth",
  },
  Object {
    "v": "/pet/{petId}_delete",
    "w": "pet",
  },
  Object {
    "v": "/pet/{petId}/uploadImage_post",
    "w": "pet",
  },
  Object {
    "v": "/pet/{petId}/uploadImage",
    "w": "petstore_auth",
  },
  Object {
    "v": "/store/inventory_get",
    "w": "store",
  },
  Object {
    "v": "/store/inventory",
    "w": "api_key",
  },
  Object {
    "v": "/store/order_post",
    "w": "store",
  },
  Object {
    "v": "/store/order/{orderId}_get",
    "w": "store",
  },
  Object {
    "v": "/store/order/{orderId}_delete",
    "w": "store",
  },
  Object {
    "v": "/user_post",
    "w": "user",
  },
  Object {
    "v": "/user/createWithArray_post",
    "w": "user",
  },
  Object {
    "v": "/user/createWithList_post",
    "w": "user",
  },
  Object {
    "v": "/user/login_get",
    "w": "user",
  },
  Object {
    "v": "/user/logout_get",
    "w": "user",
  },
  Object {
    "v": "/user/{username}_get",
    "w": "user",
  },
  Object {
    "v": "/user/{username}_put",
    "w": "user",
  },
  Object {
    "v": "/user/{username}_delete",
    "w": "user",
  },
]
`;
